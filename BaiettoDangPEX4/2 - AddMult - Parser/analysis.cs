/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using ToyLanguage.node;

namespace ToyLanguage.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProg(AProg node);
    void CaseASomeconstantsConstants(ASomeconstantsConstants node);
    void CaseANoconstantsConstants(ANoconstantsConstants node);
    void CaseASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node);
    void CaseANoneoneSubfunctions(ANoneoneSubfunctions node);
    void CaseASubfunction(ASubfunction node);
    void CaseAMainstmt(AMainstmt node);
    void CaseAStatementorstatementsStmts(AStatementorstatementsStmts node);
    void CaseANonetwoStmts(ANonetwoStmts node);
    void CaseAAssignStmt(AAssignStmt node);
    void CaseADeclStmt(ADeclStmt node);
    void CaseAFcStmt(AFcStmt node);
    void CaseACondStmt(ACondStmt node);
    void CaseAWhileStmt(AWhileStmt node);
    void CaseAMultipleargsArguments(AMultipleargsArguments node);
    void CaseASingleargArguments(ASingleargArguments node);
    void CaseANonethreeArguments(ANonethreeArguments node);
    void CaseAArgument(AArgument node);
    void CaseAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node);
    void CaseASingledefineargDefineargs(ASingledefineargDefineargs node);
    void CaseANonefourDefineargs(ANonefourDefineargs node);
    void CaseADefinearg(ADefinearg node);
    void CaseACondifstmt(ACondifstmt node);
    void CaseACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node);
    void CaseANonecondCondelsestmt(ANonecondCondelsestmt node);
    void CaseAWhilestmt(AWhilestmt node);
    void CaseAOrcondoneOrcond(AOrcondoneOrcond node);
    void CaseAPassandcondOrcond(APassandcondOrcond node);
    void CaseAAndcondoneAndcond(AAndcondoneAndcond node);
    void CaseAPasscondAndcond(APasscondAndcond node);
    void CaseAEqualitycomparisonCondition(AEqualitycomparisonCondition node);
    void CaseALesscondCondition(ALesscondCondition node);
    void CaseAGreatercondCondition(AGreatercondCondition node);
    void CaseALesseqcondCondition(ALesseqcondCondition node);
    void CaseAGreatereqcondCondition(AGreatereqcondCondition node);
    void CaseAPasstoexprCondition(APasstoexprCondition node);
    void CaseAPlusExpr(APlusExpr node);
    void CaseAMinusExpr(AMinusExpr node);
    void CaseAPasstoexprtwoExpr(APasstoexprtwoExpr node);
    void CaseAMultExpr2(AMultExpr2 node);
    void CaseADivideExpr2(ADivideExpr2 node);
    void CaseAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node);
    void CaseAExponentExpr3(AExponentExpr3 node);
    void CaseAPasstoexprfourExpr3(APasstoexprfourExpr3 node);
    void CaseANegationNegation(ANegationNegation node);
    void CaseAPasstonotcondNegation(APasstonotcondNegation node);
    void CaseANotcondoneNotcond(ANotcondoneNotcond node);
    void CaseAPassequalitycondNotcond(APassequalitycondNotcond node);
    void CaseAParentExpr4(AParentExpr4 node);
    void CaseASingularExpr4(ASingularExpr4 node);
    void CaseABooloperandOperand(ABooloperandOperand node);
    void CaseAVariableoperandOperand(AVariableoperandOperand node);
    void CaseAStringoperandOperand(AStringoperandOperand node);
    void CaseAIntoperandOperand(AIntoperandOperand node);
    void CaseAFloatoperandOperand(AFloatoperandOperand node);
    void CaseADeclarestmt(ADeclarestmt node);
    void CaseAAssignstmt(AAssignstmt node);
    void CaseAFunctioncall(AFunctioncall node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTMinus(TMinus node);
    void CaseTDivide(TDivide node);
    void CaseTExponential(TExponential node);
    void CaseTEqual(TEqual node);
    void CaseTGreaterEqual(TGreaterEqual node);
    void CaseTLessEqual(TLessEqual node);
    void CaseTGreater(TGreater node);
    void CaseTLess(TLess node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTConstant(TConstant node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTVoid(TVoid node);
    void CaseTLparen(TLparen node);
    void CaseTRparen(TRparen node);
    void CaseTComma(TComma node);
    void CaseTOpenbracket(TOpenbracket node);
    void CaseTClosebracket(TClosebracket node);
    void CaseTMain(TMain node);
    void CaseTEol(TEol node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTBoolean(TBoolean node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProg(AProg node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeconstantsConstants(ASomeconstantsConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoconstantsConstants(ANoconstantsConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubfunction(ASubfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainstmt(AMainstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonetwoStmts(ANonetwoStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStmt(AAssignStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclStmt(ADeclStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFcStmt(AFcStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACondStmt(ACondStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStmt(AWhileStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleargsArguments(AMultipleargsArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleargArguments(ASingleargArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonethreeArguments(ANonethreeArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArgument(AArgument node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonefourDefineargs(ANonefourDefineargs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADefinearg(ADefinearg node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACondifstmt(ACondifstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhilestmt(AWhilestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassandcondOrcond(APassandcondOrcond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPasscondAndcond(APasscondAndcond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALesscondCondition(ALesscondCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatercondCondition(AGreatercondCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALesseqcondCondition(ALesseqcondCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPasstoexprCondition(APasstoexprCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusExpr(APlusExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusExpr(AMinusExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExpr2(AMultExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpr2(ADivideExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExponentExpr3(AExponentExpr3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegationNegation(ANegationNegation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPasstonotcondNegation(APasstonotcondNegation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotcondoneNotcond(ANotcondoneNotcond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParentExpr4(AParentExpr4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingularExpr4(ASingularExpr4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooloperandOperand(ABooloperandOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableoperandOperand(AVariableoperandOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringoperandOperand(AStringoperandOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntoperandOperand(AIntoperandOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatoperandOperand(AFloatoperandOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarestmt(ADeclarestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignstmt(AAssignstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctioncall(AFunctioncall node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTExponential(TExponential node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterEqual(TGreaterEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqual(TLessEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoid(TVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLparen(TLparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRparen(TRparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenbracket(TOpenbracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosebracket(TClosebracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBoolean(TBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProg().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProg(AProg node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProg(AProg node)
    {
        DefaultOut(node);
    }

    public override void CaseAProg(AProg node)
    {
        InAProg(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetSubfunctions() != null)
        {
            node.GetSubfunctions().Apply(this);
        }
        if(node.GetMainstmt() != null)
        {
            node.GetMainstmt().Apply(this);
        }
        OutAProg(node);
    }
    public virtual void InASomeconstantsConstants(ASomeconstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeconstantsConstants(ASomeconstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeconstantsConstants(ASomeconstantsConstants node)
    {
        InASomeconstantsConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutASomeconstantsConstants(node);
    }
    public virtual void InANoconstantsConstants(ANoconstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoconstantsConstants(ANoconstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoconstantsConstants(ANoconstantsConstants node)
    {
        InANoconstantsConstants(node);
        OutANoconstantsConstants(node);
    }
    public virtual void InASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        InASubfunctionorsubfunctionsSubfunctions(node);
        if(node.GetSubfunctions() != null)
        {
            node.GetSubfunctions().Apply(this);
        }
        if(node.GetSubfunction() != null)
        {
            node.GetSubfunction().Apply(this);
        }
        OutASubfunctionorsubfunctionsSubfunctions(node);
    }
    public virtual void InANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        InANoneoneSubfunctions(node);
        OutANoneoneSubfunctions(node);
    }
    public virtual void InASubfunction(ASubfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubfunction(ASubfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseASubfunction(ASubfunction node)
    {
        InASubfunction(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetDefineargs() != null)
        {
            node.GetDefineargs().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        OutASubfunction(node);
    }
    public virtual void InAMainstmt(AMainstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainstmt(AMainstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainstmt(AMainstmt node)
    {
        InAMainstmt(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        OutAMainstmt(node);
    }
    public virtual void InAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        InAStatementorstatementsStmts(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutAStatementorstatementsStmts(node);
    }
    public virtual void InANonetwoStmts(ANonetwoStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonetwoStmts(ANonetwoStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseANonetwoStmts(ANonetwoStmts node)
    {
        InANonetwoStmts(node);
        OutANonetwoStmts(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetAssignstmt() != null)
        {
            node.GetAssignstmt().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDeclarestmt() != null)
        {
            node.GetDeclarestmt().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAFcStmt(AFcStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFcStmt(AFcStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFcStmt(AFcStmt node)
    {
        InAFcStmt(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAFcStmt(node);
    }
    public virtual void InACondStmt(ACondStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondStmt(ACondStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseACondStmt(ACondStmt node)
    {
        InACondStmt(node);
        if(node.GetCondifstmt() != null)
        {
            node.GetCondifstmt().Apply(this);
        }
        OutACondStmt(node);
    }
    public virtual void InAWhileStmt(AWhileStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmt(AWhileStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmt(AWhileStmt node)
    {
        InAWhileStmt(node);
        if(node.GetWhilestmt() != null)
        {
            node.GetWhilestmt().Apply(this);
        }
        OutAWhileStmt(node);
    }
    public virtual void InAMultipleargsArguments(AMultipleargsArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleargsArguments(AMultipleargsArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleargsArguments(AMultipleargsArguments node)
    {
        InAMultipleargsArguments(node);
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutAMultipleargsArguments(node);
    }
    public virtual void InASingleargArguments(ASingleargArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleargArguments(ASingleargArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleargArguments(ASingleargArguments node)
    {
        InASingleargArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutASingleargArguments(node);
    }
    public virtual void InANonethreeArguments(ANonethreeArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonethreeArguments(ANonethreeArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANonethreeArguments(ANonethreeArguments node)
    {
        InANonethreeArguments(node);
        OutANonethreeArguments(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        InAMultipledefineargsDefineargs(node);
        if(node.GetDefineargs() != null)
        {
            node.GetDefineargs().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefinearg() != null)
        {
            node.GetDefinearg().Apply(this);
        }
        OutAMultipledefineargsDefineargs(node);
    }
    public virtual void InASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        DefaultOut(node);
    }

    public override void CaseASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        InASingledefineargDefineargs(node);
        if(node.GetDefinearg() != null)
        {
            node.GetDefinearg().Apply(this);
        }
        OutASingledefineargDefineargs(node);
    }
    public virtual void InANonefourDefineargs(ANonefourDefineargs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonefourDefineargs(ANonefourDefineargs node)
    {
        DefaultOut(node);
    }

    public override void CaseANonefourDefineargs(ANonefourDefineargs node)
    {
        InANonefourDefineargs(node);
        OutANonefourDefineargs(node);
    }
    public virtual void InADefinearg(ADefinearg node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefinearg(ADefinearg node)
    {
        DefaultOut(node);
    }

    public override void CaseADefinearg(ADefinearg node)
    {
        InADefinearg(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutADefinearg(node);
    }
    public virtual void InACondifstmt(ACondifstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondifstmt(ACondifstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseACondifstmt(ACondifstmt node)
    {
        InACondifstmt(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetIfbracketopen() != null)
        {
            node.GetIfbracketopen().Apply(this);
        }
        if(node.GetResultone() != null)
        {
            node.GetResultone().Apply(this);
        }
        if(node.GetIfbracketclose() != null)
        {
            node.GetIfbracketclose().Apply(this);
        }
        if(node.GetCondelsestmt() != null)
        {
            node.GetCondelsestmt().Apply(this);
        }
        OutACondifstmt(node);
    }
    public virtual void InACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        InACondelsestmtCondelsestmt(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetElsebracketopen() != null)
        {
            node.GetElsebracketopen().Apply(this);
        }
        if(node.GetResulttwo() != null)
        {
            node.GetResulttwo().Apply(this);
        }
        if(node.GetElsebracketclose() != null)
        {
            node.GetElsebracketclose().Apply(this);
        }
        OutACondelsestmtCondelsestmt(node);
    }
    public virtual void InANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        InANonecondCondelsestmt(node);
        OutANonecondCondelsestmt(node);
    }
    public virtual void InAWhilestmt(AWhilestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilestmt(AWhilestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilestmt(AWhilestmt node)
    {
        InAWhilestmt(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        OutAWhilestmt(node);
    }
    public virtual void InAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        InAOrcondoneOrcond(node);
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetAndcond() != null)
        {
            node.GetAndcond().Apply(this);
        }
        OutAOrcondoneOrcond(node);
    }
    public virtual void InAPassandcondOrcond(APassandcondOrcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassandcondOrcond(APassandcondOrcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassandcondOrcond(APassandcondOrcond node)
    {
        InAPassandcondOrcond(node);
        if(node.GetAndcond() != null)
        {
            node.GetAndcond().Apply(this);
        }
        OutAPassandcondOrcond(node);
    }
    public virtual void InAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        InAAndcondoneAndcond(node);
        if(node.GetAndcond() != null)
        {
            node.GetAndcond().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        OutAAndcondoneAndcond(node);
    }
    public virtual void InAPasscondAndcond(APasscondAndcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasscondAndcond(APasscondAndcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasscondAndcond(APasscondAndcond node)
    {
        InAPasscondAndcond(node);
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        OutAPasscondAndcond(node);
    }
    public virtual void InAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        InAEqualitycomparisonCondition(node);
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        OutAEqualitycomparisonCondition(node);
    }
    public virtual void InALesscondCondition(ALesscondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesscondCondition(ALesscondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseALesscondCondition(ALesscondCondition node)
    {
        InALesscondCondition(node);
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        OutALesscondCondition(node);
    }
    public virtual void InAGreatercondCondition(AGreatercondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatercondCondition(AGreatercondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatercondCondition(AGreatercondCondition node)
    {
        InAGreatercondCondition(node);
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        OutAGreatercondCondition(node);
    }
    public virtual void InALesseqcondCondition(ALesseqcondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesseqcondCondition(ALesseqcondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseALesseqcondCondition(ALesseqcondCondition node)
    {
        InALesseqcondCondition(node);
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        OutALesseqcondCondition(node);
    }
    public virtual void InAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        InAGreatereqcondCondition(node);
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        if(node.GetGreaterEqual() != null)
        {
            node.GetGreaterEqual().Apply(this);
        }
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        OutAGreatereqcondCondition(node);
    }
    public virtual void InAPasstoexprCondition(APasstoexprCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprCondition(APasstoexprCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprCondition(APasstoexprCondition node)
    {
        InAPasstoexprCondition(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPasstoexprCondition(node);
    }
    public virtual void InAPlusExpr(APlusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpr(APlusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpr(APlusExpr node)
    {
        InAPlusExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPlusExpr(node);
    }
    public virtual void InAMinusExpr(AMinusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpr(AMinusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpr(AMinusExpr node)
    {
        InAMinusExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAMinusExpr(node);
    }
    public virtual void InAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        InAPasstoexprtwoExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPasstoexprtwoExpr(node);
    }
    public virtual void InAMultExpr2(AMultExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpr2(AMultExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpr2(AMultExpr2 node)
    {
        InAMultExpr2(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        OutAMultExpr2(node);
    }
    public virtual void InADivideExpr2(ADivideExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpr2(ADivideExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpr2(ADivideExpr2 node)
    {
        InADivideExpr2(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        OutADivideExpr2(node);
    }
    public virtual void InAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        InAPasstoexprthreeExpr2(node);
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        OutAPasstoexprthreeExpr2(node);
    }
    public virtual void InAExponentExpr3(AExponentExpr3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponentExpr3(AExponentExpr3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponentExpr3(AExponentExpr3 node)
    {
        InAExponentExpr3(node);
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        if(node.GetExponential() != null)
        {
            node.GetExponential().Apply(this);
        }
        if(node.GetExpr4() != null)
        {
            node.GetExpr4().Apply(this);
        }
        OutAExponentExpr3(node);
    }
    public virtual void InAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        InAPasstoexprfourExpr3(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutAPasstoexprfourExpr3(node);
    }
    public virtual void InANegationNegation(ANegationNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegationNegation(ANegationNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseANegationNegation(ANegationNegation node)
    {
        InANegationNegation(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetNotcond() != null)
        {
            node.GetNotcond().Apply(this);
        }
        OutANegationNegation(node);
    }
    public virtual void InAPasstonotcondNegation(APasstonotcondNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstonotcondNegation(APasstonotcondNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstonotcondNegation(APasstonotcondNegation node)
    {
        InAPasstonotcondNegation(node);
        if(node.GetNotcond() != null)
        {
            node.GetNotcond().Apply(this);
        }
        OutAPasstonotcondNegation(node);
    }
    public virtual void InANotcondoneNotcond(ANotcondoneNotcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotcondoneNotcond(ANotcondoneNotcond node)
    {
        DefaultOut(node);
    }

    public override void CaseANotcondoneNotcond(ANotcondoneNotcond node)
    {
        InANotcondoneNotcond(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetNotcond() != null)
        {
            node.GetNotcond().Apply(this);
        }
        OutANotcondoneNotcond(node);
    }
    public virtual void InAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        InAPassequalitycondNotcond(node);
        if(node.GetExpr4() != null)
        {
            node.GetExpr4().Apply(this);
        }
        OutAPassequalitycondNotcond(node);
    }
    public virtual void InAParentExpr4(AParentExpr4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParentExpr4(AParentExpr4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParentExpr4(AParentExpr4 node)
    {
        InAParentExpr4(node);
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutAParentExpr4(node);
    }
    public virtual void InASingularExpr4(ASingularExpr4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingularExpr4(ASingularExpr4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASingularExpr4(ASingularExpr4 node)
    {
        InASingularExpr4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutASingularExpr4(node);
    }
    public virtual void InABooloperandOperand(ABooloperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooloperandOperand(ABooloperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseABooloperandOperand(ABooloperandOperand node)
    {
        InABooloperandOperand(node);
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        OutABooloperandOperand(node);
    }
    public virtual void InAVariableoperandOperand(AVariableoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableoperandOperand(AVariableoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableoperandOperand(AVariableoperandOperand node)
    {
        InAVariableoperandOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableoperandOperand(node);
    }
    public virtual void InAStringoperandOperand(AStringoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringoperandOperand(AStringoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringoperandOperand(AStringoperandOperand node)
    {
        InAStringoperandOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringoperandOperand(node);
    }
    public virtual void InAIntoperandOperand(AIntoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntoperandOperand(AIntoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntoperandOperand(AIntoperandOperand node)
    {
        InAIntoperandOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntoperandOperand(node);
    }
    public virtual void InAFloatoperandOperand(AFloatoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatoperandOperand(AFloatoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatoperandOperand(AFloatoperandOperand node)
    {
        InAFloatoperandOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatoperandOperand(node);
    }
    public virtual void InADeclarestmt(ADeclarestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarestmt(ADeclarestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarestmt(ADeclarestmt node)
    {
        InADeclarestmt(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclarestmt(node);
    }
    public virtual void InAAssignstmt(AAssignstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignstmt(AAssignstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignstmt(AAssignstmt node)
    {
        InAAssignstmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignstmt(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctioncall(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProg().Apply(this);
        OutStart(node);
    }

    public virtual void InAProg(AProg node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProg(AProg node)
    {
        DefaultOut(node);
    }

    public override void CaseAProg(AProg node)
    {
        InAProg(node);
        if(node.GetMainstmt() != null)
        {
            node.GetMainstmt().Apply(this);
        }
        if(node.GetSubfunctions() != null)
        {
            node.GetSubfunctions().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProg(node);
    }
    public virtual void InASomeconstantsConstants(ASomeconstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeconstantsConstants(ASomeconstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeconstantsConstants(ASomeconstantsConstants node)
    {
        InASomeconstantsConstants(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutASomeconstantsConstants(node);
    }
    public virtual void InANoconstantsConstants(ANoconstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoconstantsConstants(ANoconstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoconstantsConstants(ANoconstantsConstants node)
    {
        InANoconstantsConstants(node);
        OutANoconstantsConstants(node);
    }
    public virtual void InASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseASubfunctionorsubfunctionsSubfunctions(ASubfunctionorsubfunctionsSubfunctions node)
    {
        InASubfunctionorsubfunctionsSubfunctions(node);
        if(node.GetSubfunction() != null)
        {
            node.GetSubfunction().Apply(this);
        }
        if(node.GetSubfunctions() != null)
        {
            node.GetSubfunctions().Apply(this);
        }
        OutASubfunctionorsubfunctionsSubfunctions(node);
    }
    public virtual void InANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneoneSubfunctions(ANoneoneSubfunctions node)
    {
        InANoneoneSubfunctions(node);
        OutANoneoneSubfunctions(node);
    }
    public virtual void InASubfunction(ASubfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubfunction(ASubfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseASubfunction(ASubfunction node)
    {
        InASubfunction(node);
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetDefineargs() != null)
        {
            node.GetDefineargs().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutASubfunction(node);
    }
    public virtual void InAMainstmt(AMainstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainstmt(AMainstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainstmt(AMainstmt node)
    {
        InAMainstmt(node);
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainstmt(node);
    }
    public virtual void InAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStatementorstatementsStmts(AStatementorstatementsStmts node)
    {
        InAStatementorstatementsStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAStatementorstatementsStmts(node);
    }
    public virtual void InANonetwoStmts(ANonetwoStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonetwoStmts(ANonetwoStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseANonetwoStmts(ANonetwoStmts node)
    {
        InANonetwoStmts(node);
        OutANonetwoStmts(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetAssignstmt() != null)
        {
            node.GetAssignstmt().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDeclarestmt() != null)
        {
            node.GetDeclarestmt().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAFcStmt(AFcStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFcStmt(AFcStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFcStmt(AFcStmt node)
    {
        InAFcStmt(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAFcStmt(node);
    }
    public virtual void InACondStmt(ACondStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondStmt(ACondStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseACondStmt(ACondStmt node)
    {
        InACondStmt(node);
        if(node.GetCondifstmt() != null)
        {
            node.GetCondifstmt().Apply(this);
        }
        OutACondStmt(node);
    }
    public virtual void InAWhileStmt(AWhileStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmt(AWhileStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmt(AWhileStmt node)
    {
        InAWhileStmt(node);
        if(node.GetWhilestmt() != null)
        {
            node.GetWhilestmt().Apply(this);
        }
        OutAWhileStmt(node);
    }
    public virtual void InAMultipleargsArguments(AMultipleargsArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleargsArguments(AMultipleargsArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleargsArguments(AMultipleargsArguments node)
    {
        InAMultipleargsArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        OutAMultipleargsArguments(node);
    }
    public virtual void InASingleargArguments(ASingleargArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleargArguments(ASingleargArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleargArguments(ASingleargArguments node)
    {
        InASingleargArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutASingleargArguments(node);
    }
    public virtual void InANonethreeArguments(ANonethreeArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonethreeArguments(ANonethreeArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANonethreeArguments(ANonethreeArguments node)
    {
        InANonethreeArguments(node);
        OutANonethreeArguments(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipledefineargsDefineargs(AMultipledefineargsDefineargs node)
    {
        InAMultipledefineargsDefineargs(node);
        if(node.GetDefinearg() != null)
        {
            node.GetDefinearg().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefineargs() != null)
        {
            node.GetDefineargs().Apply(this);
        }
        OutAMultipledefineargsDefineargs(node);
    }
    public virtual void InASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        DefaultOut(node);
    }

    public override void CaseASingledefineargDefineargs(ASingledefineargDefineargs node)
    {
        InASingledefineargDefineargs(node);
        if(node.GetDefinearg() != null)
        {
            node.GetDefinearg().Apply(this);
        }
        OutASingledefineargDefineargs(node);
    }
    public virtual void InANonefourDefineargs(ANonefourDefineargs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonefourDefineargs(ANonefourDefineargs node)
    {
        DefaultOut(node);
    }

    public override void CaseANonefourDefineargs(ANonefourDefineargs node)
    {
        InANonefourDefineargs(node);
        OutANonefourDefineargs(node);
    }
    public virtual void InADefinearg(ADefinearg node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefinearg(ADefinearg node)
    {
        DefaultOut(node);
    }

    public override void CaseADefinearg(ADefinearg node)
    {
        InADefinearg(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADefinearg(node);
    }
    public virtual void InACondifstmt(ACondifstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondifstmt(ACondifstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseACondifstmt(ACondifstmt node)
    {
        InACondifstmt(node);
        if(node.GetCondelsestmt() != null)
        {
            node.GetCondelsestmt().Apply(this);
        }
        if(node.GetIfbracketclose() != null)
        {
            node.GetIfbracketclose().Apply(this);
        }
        if(node.GetResultone() != null)
        {
            node.GetResultone().Apply(this);
        }
        if(node.GetIfbracketopen() != null)
        {
            node.GetIfbracketopen().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutACondifstmt(node);
    }
    public virtual void InACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseACondelsestmtCondelsestmt(ACondelsestmtCondelsestmt node)
    {
        InACondelsestmtCondelsestmt(node);
        if(node.GetElsebracketclose() != null)
        {
            node.GetElsebracketclose().Apply(this);
        }
        if(node.GetResulttwo() != null)
        {
            node.GetResulttwo().Apply(this);
        }
        if(node.GetElsebracketopen() != null)
        {
            node.GetElsebracketopen().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutACondelsestmtCondelsestmt(node);
    }
    public virtual void InANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANonecondCondelsestmt(ANonecondCondelsestmt node)
    {
        InANonecondCondelsestmt(node);
        OutANonecondCondelsestmt(node);
    }
    public virtual void InAWhilestmt(AWhilestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilestmt(AWhilestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilestmt(AWhilestmt node)
    {
        InAWhilestmt(node);
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhilestmt(node);
    }
    public virtual void InAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrcondoneOrcond(AOrcondoneOrcond node)
    {
        InAOrcondoneOrcond(node);
        if(node.GetAndcond() != null)
        {
            node.GetAndcond().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        OutAOrcondoneOrcond(node);
    }
    public virtual void InAPassandcondOrcond(APassandcondOrcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassandcondOrcond(APassandcondOrcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassandcondOrcond(APassandcondOrcond node)
    {
        InAPassandcondOrcond(node);
        if(node.GetAndcond() != null)
        {
            node.GetAndcond().Apply(this);
        }
        OutAPassandcondOrcond(node);
    }
    public virtual void InAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndcondoneAndcond(AAndcondoneAndcond node)
    {
        InAAndcondoneAndcond(node);
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetAndcond() != null)
        {
            node.GetAndcond().Apply(this);
        }
        OutAAndcondoneAndcond(node);
    }
    public virtual void InAPasscondAndcond(APasscondAndcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasscondAndcond(APasscondAndcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasscondAndcond(APasscondAndcond node)
    {
        InAPasscondAndcond(node);
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        OutAPasscondAndcond(node);
    }
    public virtual void InAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualitycomparisonCondition(AEqualitycomparisonCondition node)
    {
        InAEqualitycomparisonCondition(node);
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        OutAEqualitycomparisonCondition(node);
    }
    public virtual void InALesscondCondition(ALesscondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesscondCondition(ALesscondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseALesscondCondition(ALesscondCondition node)
    {
        InALesscondCondition(node);
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        OutALesscondCondition(node);
    }
    public virtual void InAGreatercondCondition(AGreatercondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatercondCondition(AGreatercondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatercondCondition(AGreatercondCondition node)
    {
        InAGreatercondCondition(node);
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        OutAGreatercondCondition(node);
    }
    public virtual void InALesseqcondCondition(ALesseqcondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesseqcondCondition(ALesseqcondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseALesseqcondCondition(ALesseqcondCondition node)
    {
        InALesseqcondCondition(node);
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        OutALesseqcondCondition(node);
    }
    public virtual void InAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatereqcondCondition(AGreatereqcondCondition node)
    {
        InAGreatereqcondCondition(node);
        if(node.GetSecondexpr() != null)
        {
            node.GetSecondexpr().Apply(this);
        }
        if(node.GetGreaterEqual() != null)
        {
            node.GetGreaterEqual().Apply(this);
        }
        if(node.GetFirstexpr() != null)
        {
            node.GetFirstexpr().Apply(this);
        }
        OutAGreatereqcondCondition(node);
    }
    public virtual void InAPasstoexprCondition(APasstoexprCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprCondition(APasstoexprCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprCondition(APasstoexprCondition node)
    {
        InAPasstoexprCondition(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPasstoexprCondition(node);
    }
    public virtual void InAPlusExpr(APlusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpr(APlusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpr(APlusExpr node)
    {
        InAPlusExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPlusExpr(node);
    }
    public virtual void InAMinusExpr(AMinusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpr(AMinusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpr(AMinusExpr node)
    {
        InAMinusExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAMinusExpr(node);
    }
    public virtual void InAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprtwoExpr(APasstoexprtwoExpr node)
    {
        InAPasstoexprtwoExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPasstoexprtwoExpr(node);
    }
    public virtual void InAMultExpr2(AMultExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpr2(AMultExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpr2(AMultExpr2 node)
    {
        InAMultExpr2(node);
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAMultExpr2(node);
    }
    public virtual void InADivideExpr2(ADivideExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpr2(ADivideExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpr2(ADivideExpr2 node)
    {
        InADivideExpr2(node);
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutADivideExpr2(node);
    }
    public virtual void InAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprthreeExpr2(APasstoexprthreeExpr2 node)
    {
        InAPasstoexprthreeExpr2(node);
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        OutAPasstoexprthreeExpr2(node);
    }
    public virtual void InAExponentExpr3(AExponentExpr3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponentExpr3(AExponentExpr3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponentExpr3(AExponentExpr3 node)
    {
        InAExponentExpr3(node);
        if(node.GetExpr4() != null)
        {
            node.GetExpr4().Apply(this);
        }
        if(node.GetExponential() != null)
        {
            node.GetExponential().Apply(this);
        }
        if(node.GetExpr3() != null)
        {
            node.GetExpr3().Apply(this);
        }
        OutAExponentExpr3(node);
    }
    public virtual void InAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstoexprfourExpr3(APasstoexprfourExpr3 node)
    {
        InAPasstoexprfourExpr3(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutAPasstoexprfourExpr3(node);
    }
    public virtual void InANegationNegation(ANegationNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegationNegation(ANegationNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseANegationNegation(ANegationNegation node)
    {
        InANegationNegation(node);
        if(node.GetNotcond() != null)
        {
            node.GetNotcond().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegationNegation(node);
    }
    public virtual void InAPasstonotcondNegation(APasstonotcondNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPasstonotcondNegation(APasstonotcondNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseAPasstonotcondNegation(APasstonotcondNegation node)
    {
        InAPasstonotcondNegation(node);
        if(node.GetNotcond() != null)
        {
            node.GetNotcond().Apply(this);
        }
        OutAPasstonotcondNegation(node);
    }
    public virtual void InANotcondoneNotcond(ANotcondoneNotcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotcondoneNotcond(ANotcondoneNotcond node)
    {
        DefaultOut(node);
    }

    public override void CaseANotcondoneNotcond(ANotcondoneNotcond node)
    {
        InANotcondoneNotcond(node);
        if(node.GetNotcond() != null)
        {
            node.GetNotcond().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotcondoneNotcond(node);
    }
    public virtual void InAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassequalitycondNotcond(APassequalitycondNotcond node)
    {
        InAPassequalitycondNotcond(node);
        if(node.GetExpr4() != null)
        {
            node.GetExpr4().Apply(this);
        }
        OutAPassequalitycondNotcond(node);
    }
    public virtual void InAParentExpr4(AParentExpr4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParentExpr4(AParentExpr4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParentExpr4(AParentExpr4 node)
    {
        InAParentExpr4(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        OutAParentExpr4(node);
    }
    public virtual void InASingularExpr4(ASingularExpr4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingularExpr4(ASingularExpr4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASingularExpr4(ASingularExpr4 node)
    {
        InASingularExpr4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutASingularExpr4(node);
    }
    public virtual void InABooloperandOperand(ABooloperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooloperandOperand(ABooloperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseABooloperandOperand(ABooloperandOperand node)
    {
        InABooloperandOperand(node);
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        OutABooloperandOperand(node);
    }
    public virtual void InAVariableoperandOperand(AVariableoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableoperandOperand(AVariableoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableoperandOperand(AVariableoperandOperand node)
    {
        InAVariableoperandOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableoperandOperand(node);
    }
    public virtual void InAStringoperandOperand(AStringoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringoperandOperand(AStringoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringoperandOperand(AStringoperandOperand node)
    {
        InAStringoperandOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringoperandOperand(node);
    }
    public virtual void InAIntoperandOperand(AIntoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntoperandOperand(AIntoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntoperandOperand(AIntoperandOperand node)
    {
        InAIntoperandOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntoperandOperand(node);
    }
    public virtual void InAFloatoperandOperand(AFloatoperandOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatoperandOperand(AFloatoperandOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatoperandOperand(AFloatoperandOperand node)
    {
        InAFloatoperandOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatoperandOperand(node);
    }
    public virtual void InADeclarestmt(ADeclarestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarestmt(ADeclarestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarestmt(ADeclarestmt node)
    {
        InADeclarestmt(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclarestmt(node);
    }
    public virtual void InAAssignstmt(AAssignstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignstmt(AAssignstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignstmt(AAssignstmt node)
    {
        InAAssignstmt(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrcond() != null)
        {
            node.GetOrcond().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignstmt(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctioncall(node);
    }
}
} // namespace ToyLanguage.analysis
