/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  ToyLanguage.analysis;

namespace ToyLanguage.node {

public abstract class PProg : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PSubfunctions : Node
{
}

public abstract class PSubfunction : Node
{
}

public abstract class PMainstmt : Node
{
}

public abstract class PStmts : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PArguments : Node
{
}

public abstract class PArgument : Node
{
}

public abstract class PDefineargs : Node
{
}

public abstract class PDefinearg : Node
{
}

public abstract class PCondifstmt : Node
{
}

public abstract class PCondelsestmt : Node
{
}

public abstract class PWhilestmt : Node
{
}

public abstract class POrcond : Node
{
}

public abstract class PAndcond : Node
{
}

public abstract class PCondition : Node
{
}

public abstract class PExpr : Node
{
}

public abstract class PExpr2 : Node
{
}

public abstract class PExpr3 : Node
{
}

public abstract class PNegation : Node
{
}

public abstract class PNotcond : Node
{
}

public abstract class PExpr4 : Node
{
}

public abstract class POperand : Node
{
}

public abstract class PDeclarestmt : Node
{
}

public abstract class PAssignstmt : Node
{
}

public abstract class PFunctioncall : Node
{
}


public sealed class AProg : PProg
{
    private PConstants _constants_;
    private PSubfunctions _subfunctions_;
    private PMainstmt _mainstmt_;

    public AProg ()
    {
    }

    public AProg (
            PConstants _constants_,
            PSubfunctions _subfunctions_,
            PMainstmt _mainstmt_
    )
    {
        SetConstants (_constants_);
        SetSubfunctions (_subfunctions_);
        SetMainstmt (_mainstmt_);
    }

    public override Object Clone()
    {
        return new AProg (
            (PConstants)CloneNode (_constants_),
            (PSubfunctions)CloneNode (_subfunctions_),
            (PMainstmt)CloneNode (_mainstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProg(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PSubfunctions GetSubfunctions ()
    {
        return _subfunctions_;
    }

    public void SetSubfunctions (PSubfunctions node)
    {
        if(_subfunctions_ != null)
        {
            _subfunctions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subfunctions_ = node;
    }
    public PMainstmt GetMainstmt ()
    {
        return _mainstmt_;
    }

    public void SetMainstmt (PMainstmt node)
    {
        if(_mainstmt_ != null)
        {
            _mainstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mainstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_subfunctions_)
            + ToString (_mainstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _subfunctions_ == child )
        {
            _subfunctions_ = null;
            return;
        }
        if ( _mainstmt_ == child )
        {
            _mainstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _subfunctions_ == oldChild )
        {
            SetSubfunctions ((PSubfunctions) newChild);
            return;
        }
        if ( _mainstmt_ == oldChild )
        {
            SetMainstmt ((PMainstmt) newChild);
            return;
        }
    }

}
public sealed class ASomeconstantsConstants : PConstants
{
    private PConstants _constants_;
    private TConstant _constant_;
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private POrcond _orcond_;
    private TEol _eol_;

    public ASomeconstantsConstants ()
    {
    }

    public ASomeconstantsConstants (
            PConstants _constants_,
            TConstant _constant_,
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            POrcond _orcond_,
            TEol _eol_
    )
    {
        SetConstants (_constants_);
        SetConstant (_constant_);
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetOrcond (_orcond_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ASomeconstantsConstants (
            (PConstants)CloneNode (_constants_),
            (TConstant)CloneNode (_constant_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (POrcond)CloneNode (_orcond_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeconstantsConstants(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_constant_)
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_orcond_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ANoconstantsConstants : PConstants
{


    public ANoconstantsConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoconstantsConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoconstantsConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASubfunctionorsubfunctionsSubfunctions : PSubfunctions
{
    private PSubfunctions _subfunctions_;
    private PSubfunction _subfunction_;

    public ASubfunctionorsubfunctionsSubfunctions ()
    {
    }

    public ASubfunctionorsubfunctionsSubfunctions (
            PSubfunctions _subfunctions_,
            PSubfunction _subfunction_
    )
    {
        SetSubfunctions (_subfunctions_);
        SetSubfunction (_subfunction_);
    }

    public override Object Clone()
    {
        return new ASubfunctionorsubfunctionsSubfunctions (
            (PSubfunctions)CloneNode (_subfunctions_),
            (PSubfunction)CloneNode (_subfunction_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubfunctionorsubfunctionsSubfunctions(this);
    }

    public PSubfunctions GetSubfunctions ()
    {
        return _subfunctions_;
    }

    public void SetSubfunctions (PSubfunctions node)
    {
        if(_subfunctions_ != null)
        {
            _subfunctions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subfunctions_ = node;
    }
    public PSubfunction GetSubfunction ()
    {
        return _subfunction_;
    }

    public void SetSubfunction (PSubfunction node)
    {
        if(_subfunction_ != null)
        {
            _subfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subfunction_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_subfunctions_)
            + ToString (_subfunction_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _subfunctions_ == child )
        {
            _subfunctions_ = null;
            return;
        }
        if ( _subfunction_ == child )
        {
            _subfunction_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _subfunctions_ == oldChild )
        {
            SetSubfunctions ((PSubfunctions) newChild);
            return;
        }
        if ( _subfunction_ == oldChild )
        {
            SetSubfunction ((PSubfunction) newChild);
            return;
        }
    }

}
public sealed class ANoneoneSubfunctions : PSubfunctions
{


    public ANoneoneSubfunctions (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneoneSubfunctions (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneoneSubfunctions(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASubfunction : PSubfunction
{
    private TId _id_;
    private TLparen _lparen_;
    private PDefineargs _defineargs_;
    private TRparen _rparen_;
    private TOpenbracket _openbracket_;
    private PStmts _stmts_;
    private TClosebracket _closebracket_;

    public ASubfunction ()
    {
    }

    public ASubfunction (
            TId _id_,
            TLparen _lparen_,
            PDefineargs _defineargs_,
            TRparen _rparen_,
            TOpenbracket _openbracket_,
            PStmts _stmts_,
            TClosebracket _closebracket_
    )
    {
        SetId (_id_);
        SetLparen (_lparen_);
        SetDefineargs (_defineargs_);
        SetRparen (_rparen_);
        SetOpenbracket (_openbracket_);
        SetStmts (_stmts_);
        SetClosebracket (_closebracket_);
    }

    public override Object Clone()
    {
        return new ASubfunction (
            (TId)CloneNode (_id_),
            (TLparen)CloneNode (_lparen_),
            (PDefineargs)CloneNode (_defineargs_),
            (TRparen)CloneNode (_rparen_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PStmts)CloneNode (_stmts_),
            (TClosebracket)CloneNode (_closebracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubfunction(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PDefineargs GetDefineargs ()
    {
        return _defineargs_;
    }

    public void SetDefineargs (PDefineargs node)
    {
        if(_defineargs_ != null)
        {
            _defineargs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _defineargs_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_lparen_)
            + ToString (_defineargs_)
            + ToString (_rparen_)
            + ToString (_openbracket_)
            + ToString (_stmts_)
            + ToString (_closebracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _defineargs_ == child )
        {
            _defineargs_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _defineargs_ == oldChild )
        {
            SetDefineargs ((PDefineargs) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
    }

}
public sealed class AMainstmt : PMainstmt
{
    private TMain _main_;
    private TLparen _lparen_;
    private TRparen _rparen_;
    private TOpenbracket _openbracket_;
    private PStmts _stmts_;
    private TClosebracket _closebracket_;

    public AMainstmt ()
    {
    }

    public AMainstmt (
            TMain _main_,
            TLparen _lparen_,
            TRparen _rparen_,
            TOpenbracket _openbracket_,
            PStmts _stmts_,
            TClosebracket _closebracket_
    )
    {
        SetMain (_main_);
        SetLparen (_lparen_);
        SetRparen (_rparen_);
        SetOpenbracket (_openbracket_);
        SetStmts (_stmts_);
        SetClosebracket (_closebracket_);
    }

    public override Object Clone()
    {
        return new AMainstmt (
            (TMain)CloneNode (_main_),
            (TLparen)CloneNode (_lparen_),
            (TRparen)CloneNode (_rparen_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PStmts)CloneNode (_stmts_),
            (TClosebracket)CloneNode (_closebracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainstmt(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_lparen_)
            + ToString (_rparen_)
            + ToString (_openbracket_)
            + ToString (_stmts_)
            + ToString (_closebracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
    }

}
public sealed class AStatementorstatementsStmts : PStmts
{
    private PStmts _stmts_;
    private PStmt _stmt_;

    public AStatementorstatementsStmts ()
    {
    }

    public AStatementorstatementsStmts (
            PStmts _stmts_,
            PStmt _stmt_
    )
    {
        SetStmts (_stmts_);
        SetStmt (_stmt_);
    }

    public override Object Clone()
    {
        return new AStatementorstatementsStmts (
            (PStmts)CloneNode (_stmts_),
            (PStmt)CloneNode (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStatementorstatementsStmts(this);
    }

    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public PStmt GetStmt ()
    {
        return _stmt_;
    }

    public void SetStmt (PStmt node)
    {
        if(_stmt_ != null)
        {
            _stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmts_)
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _stmt_ == child )
        {
            _stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _stmt_ == oldChild )
        {
            SetStmt ((PStmt) newChild);
            return;
        }
    }

}
public sealed class ANonetwoStmts : PStmts
{


    public ANonetwoStmts (
    )
    {
    }

    public override Object Clone()
    {
        return new ANonetwoStmts (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonetwoStmts(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAssignStmt : PStmt
{
    private PAssignstmt _assignstmt_;

    public AAssignStmt ()
    {
    }

    public AAssignStmt (
            PAssignstmt _assignstmt_
    )
    {
        SetAssignstmt (_assignstmt_);
    }

    public override Object Clone()
    {
        return new AAssignStmt (
            (PAssignstmt)CloneNode (_assignstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStmt(this);
    }

    public PAssignstmt GetAssignstmt ()
    {
        return _assignstmt_;
    }

    public void SetAssignstmt (PAssignstmt node)
    {
        if(_assignstmt_ != null)
        {
            _assignstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignstmt_ == child )
        {
            _assignstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignstmt_ == oldChild )
        {
            SetAssignstmt ((PAssignstmt) newChild);
            return;
        }
    }

}
public sealed class ADeclStmt : PStmt
{
    private PDeclarestmt _declarestmt_;

    public ADeclStmt ()
    {
    }

    public ADeclStmt (
            PDeclarestmt _declarestmt_
    )
    {
        SetDeclarestmt (_declarestmt_);
    }

    public override Object Clone()
    {
        return new ADeclStmt (
            (PDeclarestmt)CloneNode (_declarestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStmt(this);
    }

    public PDeclarestmt GetDeclarestmt ()
    {
        return _declarestmt_;
    }

    public void SetDeclarestmt (PDeclarestmt node)
    {
        if(_declarestmt_ != null)
        {
            _declarestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarestmt_ == child )
        {
            _declarestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarestmt_ == oldChild )
        {
            SetDeclarestmt ((PDeclarestmt) newChild);
            return;
        }
    }

}
public sealed class AFcStmt : PStmt
{
    private PFunctioncall _functioncall_;

    public AFcStmt ()
    {
    }

    public AFcStmt (
            PFunctioncall _functioncall_
    )
    {
        SetFunctioncall (_functioncall_);
    }

    public override Object Clone()
    {
        return new AFcStmt (
            (PFunctioncall)CloneNode (_functioncall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFcStmt(this);
    }

    public PFunctioncall GetFunctioncall ()
    {
        return _functioncall_;
    }

    public void SetFunctioncall (PFunctioncall node)
    {
        if(_functioncall_ != null)
        {
            _functioncall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functioncall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functioncall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functioncall_ == child )
        {
            _functioncall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functioncall_ == oldChild )
        {
            SetFunctioncall ((PFunctioncall) newChild);
            return;
        }
    }

}
public sealed class ACondStmt : PStmt
{
    private PCondifstmt _condifstmt_;

    public ACondStmt ()
    {
    }

    public ACondStmt (
            PCondifstmt _condifstmt_
    )
    {
        SetCondifstmt (_condifstmt_);
    }

    public override Object Clone()
    {
        return new ACondStmt (
            (PCondifstmt)CloneNode (_condifstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondStmt(this);
    }

    public PCondifstmt GetCondifstmt ()
    {
        return _condifstmt_;
    }

    public void SetCondifstmt (PCondifstmt node)
    {
        if(_condifstmt_ != null)
        {
            _condifstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condifstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_condifstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _condifstmt_ == child )
        {
            _condifstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _condifstmt_ == oldChild )
        {
            SetCondifstmt ((PCondifstmt) newChild);
            return;
        }
    }

}
public sealed class AWhileStmt : PStmt
{
    private PWhilestmt _whilestmt_;

    public AWhileStmt ()
    {
    }

    public AWhileStmt (
            PWhilestmt _whilestmt_
    )
    {
        SetWhilestmt (_whilestmt_);
    }

    public override Object Clone()
    {
        return new AWhileStmt (
            (PWhilestmt)CloneNode (_whilestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStmt(this);
    }

    public PWhilestmt GetWhilestmt ()
    {
        return _whilestmt_;
    }

    public void SetWhilestmt (PWhilestmt node)
    {
        if(_whilestmt_ != null)
        {
            _whilestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _whilestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_whilestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _whilestmt_ == child )
        {
            _whilestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _whilestmt_ == oldChild )
        {
            SetWhilestmt ((PWhilestmt) newChild);
            return;
        }
    }

}
public sealed class AMultipleargsArguments : PArguments
{
    private PArguments _arguments_;
    private TComma _comma_;
    private PArgument _argument_;

    public AMultipleargsArguments ()
    {
    }

    public AMultipleargsArguments (
            PArguments _arguments_,
            TComma _comma_,
            PArgument _argument_
    )
    {
        SetArguments (_arguments_);
        SetComma (_comma_);
        SetArgument (_argument_);
    }

    public override Object Clone()
    {
        return new AMultipleargsArguments (
            (PArguments)CloneNode (_arguments_),
            (TComma)CloneNode (_comma_),
            (PArgument)CloneNode (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleargsArguments(this);
    }

    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arguments_)
            + ToString (_comma_)
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
    }

}
public sealed class ASingleargArguments : PArguments
{
    private PArgument _argument_;

    public ASingleargArguments ()
    {
    }

    public ASingleargArguments (
            PArgument _argument_
    )
    {
        SetArgument (_argument_);
    }

    public override Object Clone()
    {
        return new ASingleargArguments (
            (PArgument)CloneNode (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleargArguments(this);
    }

    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
    }

}
public sealed class ANonethreeArguments : PArguments
{


    public ANonethreeArguments (
    )
    {
    }

    public override Object Clone()
    {
        return new ANonethreeArguments (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonethreeArguments(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AArgument : PArgument
{
    private POrcond _orcond_;

    public AArgument ()
    {
    }

    public AArgument (
            POrcond _orcond_
    )
    {
        SetOrcond (_orcond_);
    }

    public override Object Clone()
    {
        return new AArgument (
            (POrcond)CloneNode (_orcond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArgument(this);
    }

    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_orcond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
    }

}
public sealed class AMultipledefineargsDefineargs : PDefineargs
{
    private PDefineargs _defineargs_;
    private TComma _comma_;
    private PDefinearg _definearg_;

    public AMultipledefineargsDefineargs ()
    {
    }

    public AMultipledefineargsDefineargs (
            PDefineargs _defineargs_,
            TComma _comma_,
            PDefinearg _definearg_
    )
    {
        SetDefineargs (_defineargs_);
        SetComma (_comma_);
        SetDefinearg (_definearg_);
    }

    public override Object Clone()
    {
        return new AMultipledefineargsDefineargs (
            (PDefineargs)CloneNode (_defineargs_),
            (TComma)CloneNode (_comma_),
            (PDefinearg)CloneNode (_definearg_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipledefineargsDefineargs(this);
    }

    public PDefineargs GetDefineargs ()
    {
        return _defineargs_;
    }

    public void SetDefineargs (PDefineargs node)
    {
        if(_defineargs_ != null)
        {
            _defineargs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _defineargs_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PDefinearg GetDefinearg ()
    {
        return _definearg_;
    }

    public void SetDefinearg (PDefinearg node)
    {
        if(_definearg_ != null)
        {
            _definearg_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _definearg_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_defineargs_)
            + ToString (_comma_)
            + ToString (_definearg_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _defineargs_ == child )
        {
            _defineargs_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _definearg_ == child )
        {
            _definearg_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _defineargs_ == oldChild )
        {
            SetDefineargs ((PDefineargs) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _definearg_ == oldChild )
        {
            SetDefinearg ((PDefinearg) newChild);
            return;
        }
    }

}
public sealed class ASingledefineargDefineargs : PDefineargs
{
    private PDefinearg _definearg_;

    public ASingledefineargDefineargs ()
    {
    }

    public ASingledefineargDefineargs (
            PDefinearg _definearg_
    )
    {
        SetDefinearg (_definearg_);
    }

    public override Object Clone()
    {
        return new ASingledefineargDefineargs (
            (PDefinearg)CloneNode (_definearg_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingledefineargDefineargs(this);
    }

    public PDefinearg GetDefinearg ()
    {
        return _definearg_;
    }

    public void SetDefinearg (PDefinearg node)
    {
        if(_definearg_ != null)
        {
            _definearg_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _definearg_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_definearg_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _definearg_ == child )
        {
            _definearg_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _definearg_ == oldChild )
        {
            SetDefinearg ((PDefinearg) newChild);
            return;
        }
    }

}
public sealed class ANonefourDefineargs : PDefineargs
{


    public ANonefourDefineargs (
    )
    {
    }

    public override Object Clone()
    {
        return new ANonefourDefineargs (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonefourDefineargs(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADefinearg : PDefinearg
{
    private TId _type_;
    private TId _varname_;

    public ADefinearg ()
    {
    }

    public ADefinearg (
            TId _type_,
            TId _varname_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new ADefinearg (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADefinearg(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class ACondifstmt : PCondifstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private POrcond _orcond_;
    private TRparen _rparen_;
    private TOpenbracket _ifbracketopen_;
    private PStmts _resultone_;
    private TClosebracket _ifbracketclose_;
    private PCondelsestmt _condelsestmt_;

    public ACondifstmt ()
    {
    }

    public ACondifstmt (
            TIf _if_,
            TLparen _lparen_,
            POrcond _orcond_,
            TRparen _rparen_,
            TOpenbracket _ifbracketopen_,
            PStmts _resultone_,
            TClosebracket _ifbracketclose_,
            PCondelsestmt _condelsestmt_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetOrcond (_orcond_);
        SetRparen (_rparen_);
        SetIfbracketopen (_ifbracketopen_);
        SetResultone (_resultone_);
        SetIfbracketclose (_ifbracketclose_);
        SetCondelsestmt (_condelsestmt_);
    }

    public override Object Clone()
    {
        return new ACondifstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (POrcond)CloneNode (_orcond_),
            (TRparen)CloneNode (_rparen_),
            (TOpenbracket)CloneNode (_ifbracketopen_),
            (PStmts)CloneNode (_resultone_),
            (TClosebracket)CloneNode (_ifbracketclose_),
            (PCondelsestmt)CloneNode (_condelsestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondifstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TOpenbracket GetIfbracketopen ()
    {
        return _ifbracketopen_;
    }

    public void SetIfbracketopen (TOpenbracket node)
    {
        if(_ifbracketopen_ != null)
        {
            _ifbracketopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifbracketopen_ = node;
    }
    public PStmts GetResultone ()
    {
        return _resultone_;
    }

    public void SetResultone (PStmts node)
    {
        if(_resultone_ != null)
        {
            _resultone_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _resultone_ = node;
    }
    public TClosebracket GetIfbracketclose ()
    {
        return _ifbracketclose_;
    }

    public void SetIfbracketclose (TClosebracket node)
    {
        if(_ifbracketclose_ != null)
        {
            _ifbracketclose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifbracketclose_ = node;
    }
    public PCondelsestmt GetCondelsestmt ()
    {
        return _condelsestmt_;
    }

    public void SetCondelsestmt (PCondelsestmt node)
    {
        if(_condelsestmt_ != null)
        {
            _condelsestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condelsestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_orcond_)
            + ToString (_rparen_)
            + ToString (_ifbracketopen_)
            + ToString (_resultone_)
            + ToString (_ifbracketclose_)
            + ToString (_condelsestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _ifbracketopen_ == child )
        {
            _ifbracketopen_ = null;
            return;
        }
        if ( _resultone_ == child )
        {
            _resultone_ = null;
            return;
        }
        if ( _ifbracketclose_ == child )
        {
            _ifbracketclose_ = null;
            return;
        }
        if ( _condelsestmt_ == child )
        {
            _condelsestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _ifbracketopen_ == oldChild )
        {
            SetIfbracketopen ((TOpenbracket) newChild);
            return;
        }
        if ( _resultone_ == oldChild )
        {
            SetResultone ((PStmts) newChild);
            return;
        }
        if ( _ifbracketclose_ == oldChild )
        {
            SetIfbracketclose ((TClosebracket) newChild);
            return;
        }
        if ( _condelsestmt_ == oldChild )
        {
            SetCondelsestmt ((PCondelsestmt) newChild);
            return;
        }
    }

}
public sealed class ACondelsestmtCondelsestmt : PCondelsestmt
{
    private TElse _else_;
    private TOpenbracket _elsebracketopen_;
    private PStmts _resulttwo_;
    private TClosebracket _elsebracketclose_;

    public ACondelsestmtCondelsestmt ()
    {
    }

    public ACondelsestmtCondelsestmt (
            TElse _else_,
            TOpenbracket _elsebracketopen_,
            PStmts _resulttwo_,
            TClosebracket _elsebracketclose_
    )
    {
        SetElse (_else_);
        SetElsebracketopen (_elsebracketopen_);
        SetResulttwo (_resulttwo_);
        SetElsebracketclose (_elsebracketclose_);
    }

    public override Object Clone()
    {
        return new ACondelsestmtCondelsestmt (
            (TElse)CloneNode (_else_),
            (TOpenbracket)CloneNode (_elsebracketopen_),
            (PStmts)CloneNode (_resulttwo_),
            (TClosebracket)CloneNode (_elsebracketclose_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondelsestmtCondelsestmt(this);
    }

    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpenbracket GetElsebracketopen ()
    {
        return _elsebracketopen_;
    }

    public void SetElsebracketopen (TOpenbracket node)
    {
        if(_elsebracketopen_ != null)
        {
            _elsebracketopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elsebracketopen_ = node;
    }
    public PStmts GetResulttwo ()
    {
        return _resulttwo_;
    }

    public void SetResulttwo (PStmts node)
    {
        if(_resulttwo_ != null)
        {
            _resulttwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _resulttwo_ = node;
    }
    public TClosebracket GetElsebracketclose ()
    {
        return _elsebracketclose_;
    }

    public void SetElsebracketclose (TClosebracket node)
    {
        if(_elsebracketclose_ != null)
        {
            _elsebracketclose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elsebracketclose_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_)
            + ToString (_elsebracketopen_)
            + ToString (_resulttwo_)
            + ToString (_elsebracketclose_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _elsebracketopen_ == child )
        {
            _elsebracketopen_ = null;
            return;
        }
        if ( _resulttwo_ == child )
        {
            _resulttwo_ = null;
            return;
        }
        if ( _elsebracketclose_ == child )
        {
            _elsebracketclose_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _elsebracketopen_ == oldChild )
        {
            SetElsebracketopen ((TOpenbracket) newChild);
            return;
        }
        if ( _resulttwo_ == oldChild )
        {
            SetResulttwo ((PStmts) newChild);
            return;
        }
        if ( _elsebracketclose_ == oldChild )
        {
            SetElsebracketclose ((TClosebracket) newChild);
            return;
        }
    }

}
public sealed class ANonecondCondelsestmt : PCondelsestmt
{


    public ANonecondCondelsestmt (
    )
    {
    }

    public override Object Clone()
    {
        return new ANonecondCondelsestmt (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonecondCondelsestmt(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AWhilestmt : PWhilestmt
{
    private TWhile _while_;
    private TLparen _lparen_;
    private POrcond _orcond_;
    private TRparen _rparen_;
    private TOpenbracket _openbracket_;
    private PStmts _stmts_;
    private TClosebracket _closebracket_;

    public AWhilestmt ()
    {
    }

    public AWhilestmt (
            TWhile _while_,
            TLparen _lparen_,
            POrcond _orcond_,
            TRparen _rparen_,
            TOpenbracket _openbracket_,
            PStmts _stmts_,
            TClosebracket _closebracket_
    )
    {
        SetWhile (_while_);
        SetLparen (_lparen_);
        SetOrcond (_orcond_);
        SetRparen (_rparen_);
        SetOpenbracket (_openbracket_);
        SetStmts (_stmts_);
        SetClosebracket (_closebracket_);
    }

    public override Object Clone()
    {
        return new AWhilestmt (
            (TWhile)CloneNode (_while_),
            (TLparen)CloneNode (_lparen_),
            (POrcond)CloneNode (_orcond_),
            (TRparen)CloneNode (_rparen_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PStmts)CloneNode (_stmts_),
            (TClosebracket)CloneNode (_closebracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhilestmt(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_lparen_)
            + ToString (_orcond_)
            + ToString (_rparen_)
            + ToString (_openbracket_)
            + ToString (_stmts_)
            + ToString (_closebracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
    }

}
public sealed class AOrcondoneOrcond : POrcond
{
    private POrcond _orcond_;
    private TOr _or_;
    private PAndcond _andcond_;

    public AOrcondoneOrcond ()
    {
    }

    public AOrcondoneOrcond (
            POrcond _orcond_,
            TOr _or_,
            PAndcond _andcond_
    )
    {
        SetOrcond (_orcond_);
        SetOr (_or_);
        SetAndcond (_andcond_);
    }

    public override Object Clone()
    {
        return new AOrcondoneOrcond (
            (POrcond)CloneNode (_orcond_),
            (TOr)CloneNode (_or_),
            (PAndcond)CloneNode (_andcond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrcondoneOrcond(this);
    }

    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PAndcond GetAndcond ()
    {
        return _andcond_;
    }

    public void SetAndcond (PAndcond node)
    {
        if(_andcond_ != null)
        {
            _andcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andcond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_orcond_)
            + ToString (_or_)
            + ToString (_andcond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _andcond_ == child )
        {
            _andcond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _andcond_ == oldChild )
        {
            SetAndcond ((PAndcond) newChild);
            return;
        }
    }

}
public sealed class APassandcondOrcond : POrcond
{
    private PAndcond _andcond_;

    public APassandcondOrcond ()
    {
    }

    public APassandcondOrcond (
            PAndcond _andcond_
    )
    {
        SetAndcond (_andcond_);
    }

    public override Object Clone()
    {
        return new APassandcondOrcond (
            (PAndcond)CloneNode (_andcond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassandcondOrcond(this);
    }

    public PAndcond GetAndcond ()
    {
        return _andcond_;
    }

    public void SetAndcond (PAndcond node)
    {
        if(_andcond_ != null)
        {
            _andcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andcond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_andcond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _andcond_ == child )
        {
            _andcond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _andcond_ == oldChild )
        {
            SetAndcond ((PAndcond) newChild);
            return;
        }
    }

}
public sealed class AAndcondoneAndcond : PAndcond
{
    private PAndcond _andcond_;
    private TAnd _and_;
    private PCondition _condition_;

    public AAndcondoneAndcond ()
    {
    }

    public AAndcondoneAndcond (
            PAndcond _andcond_,
            TAnd _and_,
            PCondition _condition_
    )
    {
        SetAndcond (_andcond_);
        SetAnd (_and_);
        SetCondition (_condition_);
    }

    public override Object Clone()
    {
        return new AAndcondoneAndcond (
            (PAndcond)CloneNode (_andcond_),
            (TAnd)CloneNode (_and_),
            (PCondition)CloneNode (_condition_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndcondoneAndcond(this);
    }

    public PAndcond GetAndcond ()
    {
        return _andcond_;
    }

    public void SetAndcond (PAndcond node)
    {
        if(_andcond_ != null)
        {
            _andcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andcond_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_andcond_)
            + ToString (_and_)
            + ToString (_condition_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _andcond_ == child )
        {
            _andcond_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _andcond_ == oldChild )
        {
            SetAndcond ((PAndcond) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
    }

}
public sealed class APasscondAndcond : PAndcond
{
    private PCondition _condition_;

    public APasscondAndcond ()
    {
    }

    public APasscondAndcond (
            PCondition _condition_
    )
    {
        SetCondition (_condition_);
    }

    public override Object Clone()
    {
        return new APasscondAndcond (
            (PCondition)CloneNode (_condition_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPasscondAndcond(this);
    }

    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_condition_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
    }

}
public sealed class AEqualitycomparisonCondition : PCondition
{
    private PExpr _firstexpr_;
    private TEqual _equal_;
    private PExpr _secondexpr_;

    public AEqualitycomparisonCondition ()
    {
    }

    public AEqualitycomparisonCondition (
            PExpr _firstexpr_,
            TEqual _equal_,
            PExpr _secondexpr_
    )
    {
        SetFirstexpr (_firstexpr_);
        SetEqual (_equal_);
        SetSecondexpr (_secondexpr_);
    }

    public override Object Clone()
    {
        return new AEqualitycomparisonCondition (
            (PExpr)CloneNode (_firstexpr_),
            (TEqual)CloneNode (_equal_),
            (PExpr)CloneNode (_secondexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualitycomparisonCondition(this);
    }

    public PExpr GetFirstexpr ()
    {
        return _firstexpr_;
    }

    public void SetFirstexpr (PExpr node)
    {
        if(_firstexpr_ != null)
        {
            _firstexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _firstexpr_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PExpr GetSecondexpr ()
    {
        return _secondexpr_;
    }

    public void SetSecondexpr (PExpr node)
    {
        if(_secondexpr_ != null)
        {
            _secondexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _secondexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_firstexpr_)
            + ToString (_equal_)
            + ToString (_secondexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _firstexpr_ == child )
        {
            _firstexpr_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _secondexpr_ == child )
        {
            _secondexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _firstexpr_ == oldChild )
        {
            SetFirstexpr ((PExpr) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _secondexpr_ == oldChild )
        {
            SetSecondexpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class ALesscondCondition : PCondition
{
    private PExpr _firstexpr_;
    private TLess _less_;
    private PExpr _secondexpr_;

    public ALesscondCondition ()
    {
    }

    public ALesscondCondition (
            PExpr _firstexpr_,
            TLess _less_,
            PExpr _secondexpr_
    )
    {
        SetFirstexpr (_firstexpr_);
        SetLess (_less_);
        SetSecondexpr (_secondexpr_);
    }

    public override Object Clone()
    {
        return new ALesscondCondition (
            (PExpr)CloneNode (_firstexpr_),
            (TLess)CloneNode (_less_),
            (PExpr)CloneNode (_secondexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALesscondCondition(this);
    }

    public PExpr GetFirstexpr ()
    {
        return _firstexpr_;
    }

    public void SetFirstexpr (PExpr node)
    {
        if(_firstexpr_ != null)
        {
            _firstexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _firstexpr_ = node;
    }
    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }
    public PExpr GetSecondexpr ()
    {
        return _secondexpr_;
    }

    public void SetSecondexpr (PExpr node)
    {
        if(_secondexpr_ != null)
        {
            _secondexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _secondexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_firstexpr_)
            + ToString (_less_)
            + ToString (_secondexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _firstexpr_ == child )
        {
            _firstexpr_ = null;
            return;
        }
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
        if ( _secondexpr_ == child )
        {
            _secondexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _firstexpr_ == oldChild )
        {
            SetFirstexpr ((PExpr) newChild);
            return;
        }
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
        if ( _secondexpr_ == oldChild )
        {
            SetSecondexpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AGreatercondCondition : PCondition
{
    private PExpr _firstexpr_;
    private TGreater _greater_;
    private PExpr _secondexpr_;

    public AGreatercondCondition ()
    {
    }

    public AGreatercondCondition (
            PExpr _firstexpr_,
            TGreater _greater_,
            PExpr _secondexpr_
    )
    {
        SetFirstexpr (_firstexpr_);
        SetGreater (_greater_);
        SetSecondexpr (_secondexpr_);
    }

    public override Object Clone()
    {
        return new AGreatercondCondition (
            (PExpr)CloneNode (_firstexpr_),
            (TGreater)CloneNode (_greater_),
            (PExpr)CloneNode (_secondexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatercondCondition(this);
    }

    public PExpr GetFirstexpr ()
    {
        return _firstexpr_;
    }

    public void SetFirstexpr (PExpr node)
    {
        if(_firstexpr_ != null)
        {
            _firstexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _firstexpr_ = node;
    }
    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }
    public PExpr GetSecondexpr ()
    {
        return _secondexpr_;
    }

    public void SetSecondexpr (PExpr node)
    {
        if(_secondexpr_ != null)
        {
            _secondexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _secondexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_firstexpr_)
            + ToString (_greater_)
            + ToString (_secondexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _firstexpr_ == child )
        {
            _firstexpr_ = null;
            return;
        }
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
        if ( _secondexpr_ == child )
        {
            _secondexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _firstexpr_ == oldChild )
        {
            SetFirstexpr ((PExpr) newChild);
            return;
        }
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
        if ( _secondexpr_ == oldChild )
        {
            SetSecondexpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class ALesseqcondCondition : PCondition
{
    private PExpr _firstexpr_;
    private TLessEqual _less_equal_;
    private PExpr _secondexpr_;

    public ALesseqcondCondition ()
    {
    }

    public ALesseqcondCondition (
            PExpr _firstexpr_,
            TLessEqual _less_equal_,
            PExpr _secondexpr_
    )
    {
        SetFirstexpr (_firstexpr_);
        SetLessEqual (_less_equal_);
        SetSecondexpr (_secondexpr_);
    }

    public override Object Clone()
    {
        return new ALesseqcondCondition (
            (PExpr)CloneNode (_firstexpr_),
            (TLessEqual)CloneNode (_less_equal_),
            (PExpr)CloneNode (_secondexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALesseqcondCondition(this);
    }

    public PExpr GetFirstexpr ()
    {
        return _firstexpr_;
    }

    public void SetFirstexpr (PExpr node)
    {
        if(_firstexpr_ != null)
        {
            _firstexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _firstexpr_ = node;
    }
    public TLessEqual GetLessEqual ()
    {
        return _less_equal_;
    }

    public void SetLessEqual (TLessEqual node)
    {
        if(_less_equal_ != null)
        {
            _less_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_equal_ = node;
    }
    public PExpr GetSecondexpr ()
    {
        return _secondexpr_;
    }

    public void SetSecondexpr (PExpr node)
    {
        if(_secondexpr_ != null)
        {
            _secondexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _secondexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_firstexpr_)
            + ToString (_less_equal_)
            + ToString (_secondexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _firstexpr_ == child )
        {
            _firstexpr_ = null;
            return;
        }
        if ( _less_equal_ == child )
        {
            _less_equal_ = null;
            return;
        }
        if ( _secondexpr_ == child )
        {
            _secondexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _firstexpr_ == oldChild )
        {
            SetFirstexpr ((PExpr) newChild);
            return;
        }
        if ( _less_equal_ == oldChild )
        {
            SetLessEqual ((TLessEqual) newChild);
            return;
        }
        if ( _secondexpr_ == oldChild )
        {
            SetSecondexpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AGreatereqcondCondition : PCondition
{
    private PExpr _firstexpr_;
    private TGreaterEqual _greater_equal_;
    private PExpr _secondexpr_;

    public AGreatereqcondCondition ()
    {
    }

    public AGreatereqcondCondition (
            PExpr _firstexpr_,
            TGreaterEqual _greater_equal_,
            PExpr _secondexpr_
    )
    {
        SetFirstexpr (_firstexpr_);
        SetGreaterEqual (_greater_equal_);
        SetSecondexpr (_secondexpr_);
    }

    public override Object Clone()
    {
        return new AGreatereqcondCondition (
            (PExpr)CloneNode (_firstexpr_),
            (TGreaterEqual)CloneNode (_greater_equal_),
            (PExpr)CloneNode (_secondexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatereqcondCondition(this);
    }

    public PExpr GetFirstexpr ()
    {
        return _firstexpr_;
    }

    public void SetFirstexpr (PExpr node)
    {
        if(_firstexpr_ != null)
        {
            _firstexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _firstexpr_ = node;
    }
    public TGreaterEqual GetGreaterEqual ()
    {
        return _greater_equal_;
    }

    public void SetGreaterEqual (TGreaterEqual node)
    {
        if(_greater_equal_ != null)
        {
            _greater_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_equal_ = node;
    }
    public PExpr GetSecondexpr ()
    {
        return _secondexpr_;
    }

    public void SetSecondexpr (PExpr node)
    {
        if(_secondexpr_ != null)
        {
            _secondexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _secondexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_firstexpr_)
            + ToString (_greater_equal_)
            + ToString (_secondexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _firstexpr_ == child )
        {
            _firstexpr_ = null;
            return;
        }
        if ( _greater_equal_ == child )
        {
            _greater_equal_ = null;
            return;
        }
        if ( _secondexpr_ == child )
        {
            _secondexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _firstexpr_ == oldChild )
        {
            SetFirstexpr ((PExpr) newChild);
            return;
        }
        if ( _greater_equal_ == oldChild )
        {
            SetGreaterEqual ((TGreaterEqual) newChild);
            return;
        }
        if ( _secondexpr_ == oldChild )
        {
            SetSecondexpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class APasstoexprCondition : PCondition
{
    private PExpr _expr_;

    public APasstoexprCondition ()
    {
    }

    public APasstoexprCondition (
            PExpr _expr_
    )
    {
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new APasstoexprCondition (
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPasstoexprCondition(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class APlusExpr : PExpr
{
    private PExpr _expr_;
    private TPlus _plus_;
    private PExpr2 _expr2_;

    public APlusExpr ()
    {
    }

    public APlusExpr (
            PExpr _expr_,
            TPlus _plus_,
            PExpr2 _expr2_
    )
    {
        SetExpr (_expr_);
        SetPlus (_plus_);
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new APlusExpr (
            (PExpr)CloneNode (_expr_),
            (TPlus)CloneNode (_plus_),
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_plus_)
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class AMinusExpr : PExpr
{
    private PExpr _expr_;
    private TMinus _minus_;
    private PExpr2 _expr2_;

    public AMinusExpr ()
    {
    }

    public AMinusExpr (
            PExpr _expr_,
            TMinus _minus_,
            PExpr2 _expr2_
    )
    {
        SetExpr (_expr_);
        SetMinus (_minus_);
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new AMinusExpr (
            (PExpr)CloneNode (_expr_),
            (TMinus)CloneNode (_minus_),
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_minus_)
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class APasstoexprtwoExpr : PExpr
{
    private PExpr2 _expr2_;

    public APasstoexprtwoExpr ()
    {
    }

    public APasstoexprtwoExpr (
            PExpr2 _expr2_
    )
    {
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new APasstoexprtwoExpr (
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPasstoexprtwoExpr(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class AMultExpr2 : PExpr2
{
    private PExpr2 _expr2_;
    private TMult _mult_;
    private PExpr3 _expr3_;

    public AMultExpr2 ()
    {
    }

    public AMultExpr2 (
            PExpr2 _expr2_,
            TMult _mult_,
            PExpr3 _expr3_
    )
    {
        SetExpr2 (_expr2_);
        SetMult (_mult_);
        SetExpr3 (_expr3_);
    }

    public override Object Clone()
    {
        return new AMultExpr2 (
            (PExpr2)CloneNode (_expr2_),
            (TMult)CloneNode (_mult_),
            (PExpr3)CloneNode (_expr3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExpr2(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpr3 GetExpr3 ()
    {
        return _expr3_;
    }

    public void SetExpr3 (PExpr3 node)
    {
        if(_expr3_ != null)
        {
            _expr3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
            + ToString (_mult_)
            + ToString (_expr3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expr3_ == child )
        {
            _expr3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expr3_ == oldChild )
        {
            SetExpr3 ((PExpr3) newChild);
            return;
        }
    }

}
public sealed class ADivideExpr2 : PExpr2
{
    private PExpr2 _expr2_;
    private TDivide _divide_;
    private PExpr3 _expr3_;

    public ADivideExpr2 ()
    {
    }

    public ADivideExpr2 (
            PExpr2 _expr2_,
            TDivide _divide_,
            PExpr3 _expr3_
    )
    {
        SetExpr2 (_expr2_);
        SetDivide (_divide_);
        SetExpr3 (_expr3_);
    }

    public override Object Clone()
    {
        return new ADivideExpr2 (
            (PExpr2)CloneNode (_expr2_),
            (TDivide)CloneNode (_divide_),
            (PExpr3)CloneNode (_expr3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpr2(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PExpr3 GetExpr3 ()
    {
        return _expr3_;
    }

    public void SetExpr3 (PExpr3 node)
    {
        if(_expr3_ != null)
        {
            _expr3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
            + ToString (_divide_)
            + ToString (_expr3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _expr3_ == child )
        {
            _expr3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _expr3_ == oldChild )
        {
            SetExpr3 ((PExpr3) newChild);
            return;
        }
    }

}
public sealed class APasstoexprthreeExpr2 : PExpr2
{
    private PExpr3 _expr3_;

    public APasstoexprthreeExpr2 ()
    {
    }

    public APasstoexprthreeExpr2 (
            PExpr3 _expr3_
    )
    {
        SetExpr3 (_expr3_);
    }

    public override Object Clone()
    {
        return new APasstoexprthreeExpr2 (
            (PExpr3)CloneNode (_expr3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPasstoexprthreeExpr2(this);
    }

    public PExpr3 GetExpr3 ()
    {
        return _expr3_;
    }

    public void SetExpr3 (PExpr3 node)
    {
        if(_expr3_ != null)
        {
            _expr3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr3_ == child )
        {
            _expr3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr3_ == oldChild )
        {
            SetExpr3 ((PExpr3) newChild);
            return;
        }
    }

}
public sealed class AExponentExpr3 : PExpr3
{
    private PExpr3 _expr3_;
    private TExponential _exponential_;
    private PExpr4 _expr4_;

    public AExponentExpr3 ()
    {
    }

    public AExponentExpr3 (
            PExpr3 _expr3_,
            TExponential _exponential_,
            PExpr4 _expr4_
    )
    {
        SetExpr3 (_expr3_);
        SetExponential (_exponential_);
        SetExpr4 (_expr4_);
    }

    public override Object Clone()
    {
        return new AExponentExpr3 (
            (PExpr3)CloneNode (_expr3_),
            (TExponential)CloneNode (_exponential_),
            (PExpr4)CloneNode (_expr4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExponentExpr3(this);
    }

    public PExpr3 GetExpr3 ()
    {
        return _expr3_;
    }

    public void SetExpr3 (PExpr3 node)
    {
        if(_expr3_ != null)
        {
            _expr3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr3_ = node;
    }
    public TExponential GetExponential ()
    {
        return _exponential_;
    }

    public void SetExponential (TExponential node)
    {
        if(_exponential_ != null)
        {
            _exponential_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exponential_ = node;
    }
    public PExpr4 GetExpr4 ()
    {
        return _expr4_;
    }

    public void SetExpr4 (PExpr4 node)
    {
        if(_expr4_ != null)
        {
            _expr4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr3_)
            + ToString (_exponential_)
            + ToString (_expr4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr3_ == child )
        {
            _expr3_ = null;
            return;
        }
        if ( _exponential_ == child )
        {
            _exponential_ = null;
            return;
        }
        if ( _expr4_ == child )
        {
            _expr4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr3_ == oldChild )
        {
            SetExpr3 ((PExpr3) newChild);
            return;
        }
        if ( _exponential_ == oldChild )
        {
            SetExponential ((TExponential) newChild);
            return;
        }
        if ( _expr4_ == oldChild )
        {
            SetExpr4 ((PExpr4) newChild);
            return;
        }
    }

}
public sealed class APasstoexprfourExpr3 : PExpr3
{
    private PNegation _negation_;

    public APasstoexprfourExpr3 ()
    {
    }

    public APasstoexprfourExpr3 (
            PNegation _negation_
    )
    {
        SetNegation (_negation_);
    }

    public override Object Clone()
    {
        return new APasstoexprfourExpr3 (
            (PNegation)CloneNode (_negation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPasstoexprfourExpr3(this);
    }

    public PNegation GetNegation ()
    {
        return _negation_;
    }

    public void SetNegation (PNegation node)
    {
        if(_negation_ != null)
        {
            _negation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _negation_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_negation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _negation_ == child )
        {
            _negation_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _negation_ == oldChild )
        {
            SetNegation ((PNegation) newChild);
            return;
        }
    }

}
public sealed class ANegationNegation : PNegation
{
    private TMinus _minus_;
    private PNotcond _notcond_;

    public ANegationNegation ()
    {
    }

    public ANegationNegation (
            TMinus _minus_,
            PNotcond _notcond_
    )
    {
        SetMinus (_minus_);
        SetNotcond (_notcond_);
    }

    public override Object Clone()
    {
        return new ANegationNegation (
            (TMinus)CloneNode (_minus_),
            (PNotcond)CloneNode (_notcond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegationNegation(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PNotcond GetNotcond ()
    {
        return _notcond_;
    }

    public void SetNotcond (PNotcond node)
    {
        if(_notcond_ != null)
        {
            _notcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _notcond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_notcond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _notcond_ == child )
        {
            _notcond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _notcond_ == oldChild )
        {
            SetNotcond ((PNotcond) newChild);
            return;
        }
    }

}
public sealed class APasstonotcondNegation : PNegation
{
    private PNotcond _notcond_;

    public APasstonotcondNegation ()
    {
    }

    public APasstonotcondNegation (
            PNotcond _notcond_
    )
    {
        SetNotcond (_notcond_);
    }

    public override Object Clone()
    {
        return new APasstonotcondNegation (
            (PNotcond)CloneNode (_notcond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPasstonotcondNegation(this);
    }

    public PNotcond GetNotcond ()
    {
        return _notcond_;
    }

    public void SetNotcond (PNotcond node)
    {
        if(_notcond_ != null)
        {
            _notcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _notcond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_notcond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _notcond_ == child )
        {
            _notcond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _notcond_ == oldChild )
        {
            SetNotcond ((PNotcond) newChild);
            return;
        }
    }

}
public sealed class ANotcondoneNotcond : PNotcond
{
    private TNot _not_;
    private PNotcond _notcond_;

    public ANotcondoneNotcond ()
    {
    }

    public ANotcondoneNotcond (
            TNot _not_,
            PNotcond _notcond_
    )
    {
        SetNot (_not_);
        SetNotcond (_notcond_);
    }

    public override Object Clone()
    {
        return new ANotcondoneNotcond (
            (TNot)CloneNode (_not_),
            (PNotcond)CloneNode (_notcond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotcondoneNotcond(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PNotcond GetNotcond ()
    {
        return _notcond_;
    }

    public void SetNotcond (PNotcond node)
    {
        if(_notcond_ != null)
        {
            _notcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _notcond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_notcond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _notcond_ == child )
        {
            _notcond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _notcond_ == oldChild )
        {
            SetNotcond ((PNotcond) newChild);
            return;
        }
    }

}
public sealed class APassequalitycondNotcond : PNotcond
{
    private PExpr4 _expr4_;

    public APassequalitycondNotcond ()
    {
    }

    public APassequalitycondNotcond (
            PExpr4 _expr4_
    )
    {
        SetExpr4 (_expr4_);
    }

    public override Object Clone()
    {
        return new APassequalitycondNotcond (
            (PExpr4)CloneNode (_expr4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassequalitycondNotcond(this);
    }

    public PExpr4 GetExpr4 ()
    {
        return _expr4_;
    }

    public void SetExpr4 (PExpr4 node)
    {
        if(_expr4_ != null)
        {
            _expr4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr4_ == child )
        {
            _expr4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr4_ == oldChild )
        {
            SetExpr4 ((PExpr4) newChild);
            return;
        }
    }

}
public sealed class AParentExpr4 : PExpr4
{
    private TLparen _lparen_;
    private POrcond _orcond_;
    private TRparen _rparen_;

    public AParentExpr4 ()
    {
    }

    public AParentExpr4 (
            TLparen _lparen_,
            POrcond _orcond_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetOrcond (_orcond_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AParentExpr4 (
            (TLparen)CloneNode (_lparen_),
            (POrcond)CloneNode (_orcond_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParentExpr4(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_orcond_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class ASingularExpr4 : PExpr4
{
    private POperand _operand_;

    public ASingularExpr4 ()
    {
    }

    public ASingularExpr4 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ASingularExpr4 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingularExpr4(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class ABooloperandOperand : POperand
{
    private TBoolean _boolean_;

    public ABooloperandOperand ()
    {
    }

    public ABooloperandOperand (
            TBoolean _boolean_
    )
    {
        SetBoolean (_boolean_);
    }

    public override Object Clone()
    {
        return new ABooloperandOperand (
            (TBoolean)CloneNode (_boolean_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooloperandOperand(this);
    }

    public TBoolean GetBoolean ()
    {
        return _boolean_;
    }

    public void SetBoolean (TBoolean node)
    {
        if(_boolean_ != null)
        {
            _boolean_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_ == child )
        {
            _boolean_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_ == oldChild )
        {
            SetBoolean ((TBoolean) newChild);
            return;
        }
    }

}
public sealed class AVariableoperandOperand : POperand
{
    private TId _id_;

    public AVariableoperandOperand ()
    {
    }

    public AVariableoperandOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableoperandOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableoperandOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringoperandOperand : POperand
{
    private TString _string_;

    public AStringoperandOperand ()
    {
    }

    public AStringoperandOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringoperandOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringoperandOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AIntoperandOperand : POperand
{
    private TInteger _integer_;

    public AIntoperandOperand ()
    {
    }

    public AIntoperandOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntoperandOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntoperandOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatoperandOperand : POperand
{
    private TFloat _float_;

    public AFloatoperandOperand ()
    {
    }

    public AFloatoperandOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatoperandOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatoperandOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class ADeclarestmt : PDeclarestmt
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclarestmt ()
    {
    }

    public ADeclarestmt (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclarestmt (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarestmt(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignstmt : PAssignstmt
{
    private TId _id_;
    private TAssign _assign_;
    private POrcond _orcond_;
    private TEol _eol_;

    public AAssignstmt ()
    {
    }

    public AAssignstmt (
            TId _id_,
            TAssign _assign_,
            POrcond _orcond_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetOrcond (_orcond_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignstmt (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (POrcond)CloneNode (_orcond_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignstmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrcond GetOrcond ()
    {
        return _orcond_;
    }

    public void SetOrcond (POrcond node)
    {
        if(_orcond_ != null)
        {
            _orcond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orcond_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_orcond_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _orcond_ == child )
        {
            _orcond_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _orcond_ == oldChild )
        {
            SetOrcond ((POrcond) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctioncall : PFunctioncall
{
    private TId _id_;
    private TLparen _lparen_;
    private PArguments _arguments_;
    private TRparen _rparen_;
    private TEol _eol_;

    public AFunctioncall ()
    {
    }

    public AFunctioncall (
            TId _id_,
            TLparen _lparen_,
            PArguments _arguments_,
            TRparen _rparen_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLparen (_lparen_);
        SetArguments (_arguments_);
        SetRparen (_rparen_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctioncall (
            (TId)CloneNode (_id_),
            (TLparen)CloneNode (_lparen_),
            (PArguments)CloneNode (_arguments_),
            (TRparen)CloneNode (_rparen_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctioncall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_lparen_)
            + ToString (_arguments_)
            + ToString (_rparen_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProg _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProg _base_,
        EOF _eof_)
    {
        SetPProg(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProg) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProg GetPProg()
    {
        return _base_;
    }
    public void SetPProg(PProg node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProg((PProg) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
