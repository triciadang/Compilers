/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using ToyLanguage.node;

namespace ToyLanguage.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAStmtsAssignmentStmts(AStmtsAssignmentStmts node);
    void CaseAStmtsXprStmts(AStmtsXprStmts node);
    void CaseAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node);
    void CaseAStmtsDeclarationStmts(AStmtsDeclarationStmts node);
    void CaseAAssignment(AAssignment node);
    void CaseAFunctioncall(AFunctioncall node);
    void CaseAIntArgArguments(AIntArgArguments node);
    void CaseAFloatArgArguments(AFloatArgArguments node);
    void CaseAStringArgArguments(AStringArgArguments node);
    void CaseADeclaration(ADeclaration node);
    void CaseAPlusMultiExprExpression(APlusMultiExprExpression node);
    void CaseAMultExprExpression(AMultExprExpression node);
    void CaseAMultiPassMultMultiPass(AMultiPassMultMultiPass node);
    void CaseAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node);
    void CaseAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node);
    void CaseAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node);
    void CaseAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTMinus(TMinus node);
    void CaseTDivide(TDivide node);
    void CaseTEqual(TEqual node);
    void CaseTGreaterEqual(TGreaterEqual node);
    void CaseTLessEqual(TLessEqual node);
    void CaseTGreater(TGreater node);
    void CaseTLess(TLess node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTConstant(TConstant node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTVoid(TVoid node);
    void CaseTLParenth(TLParenth node);
    void CaseTRParenth(TRParenth node);
    void CaseTMain(TMain node);
    void CaseTEol(TEol node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTChar(TChar node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStmtsXprStmts(AStmtsXprStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignment(AAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctioncall(AFunctioncall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntArgArguments(AIntArgArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatArgArguments(AFloatArgArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringArgArguments(AStringArgArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclaration(ADeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExprExpression(AMultExprExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterEqual(TGreaterEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqual(TLessEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoid(TVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLParenth(TLParenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRParenth(TRParenth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTChar(TChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        InAStmtsAssignmentStmts(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAStmtsAssignmentStmts(node);
    }
    public virtual void InAStmtsXprStmts(AStmtsXprStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsXprStmts(AStmtsXprStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsXprStmts(AStmtsXprStmts node)
    {
        InAStmtsXprStmts(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAStmtsXprStmts(node);
    }
    public virtual void InAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        InAStmtsFunctioncallStmts(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAStmtsFunctioncallStmts(node);
    }
    public virtual void InAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        InAStmtsDeclarationStmts(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutAStmtsDeclarationStmts(node);
    }
    public virtual void InAAssignment(AAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignment(AAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignment(AAssignment node)
    {
        InAAssignment(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignment(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLParenth() != null)
        {
            node.GetLParenth().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRParenth() != null)
        {
            node.GetRParenth().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctioncall(node);
    }
    public virtual void InAIntArgArguments(AIntArgArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntArgArguments(AIntArgArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntArgArguments(AIntArgArguments node)
    {
        InAIntArgArguments(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntArgArguments(node);
    }
    public virtual void InAFloatArgArguments(AFloatArgArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatArgArguments(AFloatArgArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatArgArguments(AFloatArgArguments node)
    {
        InAFloatArgArguments(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatArgArguments(node);
    }
    public virtual void InAStringArgArguments(AStringArgArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringArgArguments(AStringArgArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringArgArguments(AStringArgArguments node)
    {
        InAStringArgArguments(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringArgArguments(node);
    }
    public virtual void InADeclaration(ADeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaration(ADeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaration(ADeclaration node)
    {
        InADeclaration(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclaration(node);
    }
    public virtual void InAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        InAPlusMultiExprExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMultiPass() != null)
        {
            node.GetMultiPass().Apply(this);
        }
        OutAPlusMultiExprExpression(node);
    }
    public virtual void InAMultExprExpression(AMultExprExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExprExpression(AMultExprExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExprExpression(AMultExprExpression node)
    {
        InAMultExprExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetMultiPass() != null)
        {
            node.GetMultiPass().Apply(this);
        }
        OutAMultExprExpression(node);
    }
    public virtual void InAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        InAMultiPassMultMultiPass(node);
        if(node.GetMultiPass() != null)
        {
            node.GetMultiPass().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetSimpleton() != null)
        {
            node.GetSimpleton().Apply(this);
        }
        OutAMultiPassMultMultiPass(node);
    }
    public virtual void InAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        InAMultiPassSimpletonMultiPass(node);
        if(node.GetSimpleton() != null)
        {
            node.GetSimpleton().Apply(this);
        }
        OutAMultiPassSimpletonMultiPass(node);
    }
    public virtual void InAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        InAVariableSimpletonSimpleton(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableSimpletonSimpleton(node);
    }
    public virtual void InAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        InAIntegerSimpletonSimpleton(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerSimpletonSimpleton(node);
    }
    public virtual void InAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        InAFloatSimpletonSimpleton(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatSimpletonSimpleton(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsAssignmentStmts(AStmtsAssignmentStmts node)
    {
        InAStmtsAssignmentStmts(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAStmtsAssignmentStmts(node);
    }
    public virtual void InAStmtsXprStmts(AStmtsXprStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsXprStmts(AStmtsXprStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsXprStmts(AStmtsXprStmts node)
    {
        InAStmtsXprStmts(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAStmtsXprStmts(node);
    }
    public virtual void InAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsFunctioncallStmts(AStmtsFunctioncallStmts node)
    {
        InAStmtsFunctioncallStmts(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAStmtsFunctioncallStmts(node);
    }
    public virtual void InAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtsDeclarationStmts(AStmtsDeclarationStmts node)
    {
        InAStmtsDeclarationStmts(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutAStmtsDeclarationStmts(node);
    }
    public virtual void InAAssignment(AAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignment(AAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignment(AAssignment node)
    {
        InAAssignment(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignment(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRParenth() != null)
        {
            node.GetRParenth().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLParenth() != null)
        {
            node.GetLParenth().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctioncall(node);
    }
    public virtual void InAIntArgArguments(AIntArgArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntArgArguments(AIntArgArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntArgArguments(AIntArgArguments node)
    {
        InAIntArgArguments(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntArgArguments(node);
    }
    public virtual void InAFloatArgArguments(AFloatArgArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatArgArguments(AFloatArgArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatArgArguments(AFloatArgArguments node)
    {
        InAFloatArgArguments(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatArgArguments(node);
    }
    public virtual void InAStringArgArguments(AStringArgArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringArgArguments(AStringArgArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringArgArguments(AStringArgArguments node)
    {
        InAStringArgArguments(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringArgArguments(node);
    }
    public virtual void InADeclaration(ADeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaration(ADeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaration(ADeclaration node)
    {
        InADeclaration(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclaration(node);
    }
    public virtual void InAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusMultiExprExpression(APlusMultiExprExpression node)
    {
        InAPlusMultiExprExpression(node);
        if(node.GetMultiPass() != null)
        {
            node.GetMultiPass().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAPlusMultiExprExpression(node);
    }
    public virtual void InAMultExprExpression(AMultExprExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExprExpression(AMultExprExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExprExpression(AMultExprExpression node)
    {
        InAMultExprExpression(node);
        if(node.GetMultiPass() != null)
        {
            node.GetMultiPass().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMultExprExpression(node);
    }
    public virtual void InAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiPassMultMultiPass(AMultiPassMultMultiPass node)
    {
        InAMultiPassMultMultiPass(node);
        if(node.GetSimpleton() != null)
        {
            node.GetSimpleton().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetMultiPass() != null)
        {
            node.GetMultiPass().Apply(this);
        }
        OutAMultiPassMultMultiPass(node);
    }
    public virtual void InAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiPassSimpletonMultiPass(AMultiPassSimpletonMultiPass node)
    {
        InAMultiPassSimpletonMultiPass(node);
        if(node.GetSimpleton() != null)
        {
            node.GetSimpleton().Apply(this);
        }
        OutAMultiPassSimpletonMultiPass(node);
    }
    public virtual void InAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableSimpletonSimpleton(AVariableSimpletonSimpleton node)
    {
        InAVariableSimpletonSimpleton(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableSimpletonSimpleton(node);
    }
    public virtual void InAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerSimpletonSimpleton(AIntegerSimpletonSimpleton node)
    {
        InAIntegerSimpletonSimpleton(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerSimpletonSimpleton(node);
    }
    public virtual void InAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatSimpletonSimpleton(AFloatSimpletonSimpleton node)
    {
        InAFloatSimpletonSimpleton(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatSimpletonSimpleton(node);
    }
}
} // namespace ToyLanguage.analysis
