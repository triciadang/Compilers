/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  ToyLanguage.analysis;

namespace ToyLanguage.node {

public abstract class PProgram : Node
{
}

public abstract class PStmts : Node
{
}

public abstract class PAssignment : Node
{
}

public abstract class PFunctioncall : Node
{
}

public abstract class PArguments : Node
{
}

public abstract class PDeclaration : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PMultiPass : Node
{
}

public abstract class PSimpleton : Node
{
}


public sealed class AProgram : PProgram
{
    private PStmts _stmts_;

    public AProgram ()
    {
    }

    public AProgram (
            PStmts _stmts_
    )
    {
        SetStmts (_stmts_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PStmts)CloneNode (_stmts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
    }

}
public sealed class AStmtsAssignmentStmts : PStmts
{
    private PAssignment _assignment_;

    public AStmtsAssignmentStmts ()
    {
    }

    public AStmtsAssignmentStmts (
            PAssignment _assignment_
    )
    {
        SetAssignment (_assignment_);
    }

    public override Object Clone()
    {
        return new AStmtsAssignmentStmts (
            (PAssignment)CloneNode (_assignment_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmtsAssignmentStmts(this);
    }

    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
    }

}
public sealed class AStmtsXprStmts : PStmts
{
    private PExpression _expression_;

    public AStmtsXprStmts ()
    {
    }

    public AStmtsXprStmts (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AStmtsXprStmts (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmtsXprStmts(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AStmtsFunctioncallStmts : PStmts
{
    private PFunctioncall _functioncall_;

    public AStmtsFunctioncallStmts ()
    {
    }

    public AStmtsFunctioncallStmts (
            PFunctioncall _functioncall_
    )
    {
        SetFunctioncall (_functioncall_);
    }

    public override Object Clone()
    {
        return new AStmtsFunctioncallStmts (
            (PFunctioncall)CloneNode (_functioncall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmtsFunctioncallStmts(this);
    }

    public PFunctioncall GetFunctioncall ()
    {
        return _functioncall_;
    }

    public void SetFunctioncall (PFunctioncall node)
    {
        if(_functioncall_ != null)
        {
            _functioncall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functioncall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functioncall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functioncall_ == child )
        {
            _functioncall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functioncall_ == oldChild )
        {
            SetFunctioncall ((PFunctioncall) newChild);
            return;
        }
    }

}
public sealed class AStmtsDeclarationStmts : PStmts
{
    private PDeclaration _declaration_;

    public AStmtsDeclarationStmts ()
    {
    }

    public AStmtsDeclarationStmts (
            PDeclaration _declaration_
    )
    {
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new AStmtsDeclarationStmts (
            (PDeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmtsDeclarationStmts(this);
    }

    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
    }

}
public sealed class AAssignment : PAssignment
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AAssignment ()
    {
    }

    public AAssignment (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignment (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignment(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctioncall : PFunctioncall
{
    private TId _id_;
    private TLParenth _l_parenth_;
    private PArguments _arguments_;
    private TRParenth _r_parenth_;
    private TEol _eol_;

    public AFunctioncall ()
    {
    }

    public AFunctioncall (
            TId _id_,
            TLParenth _l_parenth_,
            PArguments _arguments_,
            TRParenth _r_parenth_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLParenth (_l_parenth_);
        SetArguments (_arguments_);
        SetRParenth (_r_parenth_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctioncall (
            (TId)CloneNode (_id_),
            (TLParenth)CloneNode (_l_parenth_),
            (PArguments)CloneNode (_arguments_),
            (TRParenth)CloneNode (_r_parenth_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctioncall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLParenth GetLParenth ()
    {
        return _l_parenth_;
    }

    public void SetLParenth (TLParenth node)
    {
        if(_l_parenth_ != null)
        {
            _l_parenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenth_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRParenth GetRParenth ()
    {
        return _r_parenth_;
    }

    public void SetRParenth (TRParenth node)
    {
        if(_r_parenth_ != null)
        {
            _r_parenth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenth_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_l_parenth_)
            + ToString (_arguments_)
            + ToString (_r_parenth_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _l_parenth_ == child )
        {
            _l_parenth_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _r_parenth_ == child )
        {
            _r_parenth_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _l_parenth_ == oldChild )
        {
            SetLParenth ((TLParenth) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _r_parenth_ == oldChild )
        {
            SetRParenth ((TRParenth) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AIntArgArguments : PArguments
{
    private TInteger _integer_;

    public AIntArgArguments ()
    {
    }

    public AIntArgArguments (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntArgArguments (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntArgArguments(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatArgArguments : PArguments
{
    private TFloat _float_;

    public AFloatArgArguments ()
    {
    }

    public AFloatArgArguments (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatArgArguments (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatArgArguments(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AStringArgArguments : PArguments
{
    private TString _string_;

    public AStringArgArguments ()
    {
    }

    public AStringArgArguments (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringArgArguments (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringArgArguments(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class ADeclaration : PDeclaration
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclaration ()
    {
    }

    public ADeclaration (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclaration (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclaration(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class APlusMultiExprExpression : PExpression
{
    private PExpression _expression_;
    private TPlus _plus_;
    private PMultiPass _multi_pass_;

    public APlusMultiExprExpression ()
    {
    }

    public APlusMultiExprExpression (
            PExpression _expression_,
            TPlus _plus_,
            PMultiPass _multi_pass_
    )
    {
        SetExpression (_expression_);
        SetPlus (_plus_);
        SetMultiPass (_multi_pass_);
    }

    public override Object Clone()
    {
        return new APlusMultiExprExpression (
            (PExpression)CloneNode (_expression_),
            (TPlus)CloneNode (_plus_),
            (PMultiPass)CloneNode (_multi_pass_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusMultiExprExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PMultiPass GetMultiPass ()
    {
        return _multi_pass_;
    }

    public void SetMultiPass (PMultiPass node)
    {
        if(_multi_pass_ != null)
        {
            _multi_pass_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_pass_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_plus_)
            + ToString (_multi_pass_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _multi_pass_ == child )
        {
            _multi_pass_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _multi_pass_ == oldChild )
        {
            SetMultiPass ((PMultiPass) newChild);
            return;
        }
    }

}
public sealed class AMultExprExpression : PExpression
{
    private PExpression _expression_;
    private PMultiPass _multi_pass_;

    public AMultExprExpression ()
    {
    }

    public AMultExprExpression (
            PExpression _expression_,
            PMultiPass _multi_pass_
    )
    {
        SetExpression (_expression_);
        SetMultiPass (_multi_pass_);
    }

    public override Object Clone()
    {
        return new AMultExprExpression (
            (PExpression)CloneNode (_expression_),
            (PMultiPass)CloneNode (_multi_pass_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExprExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public PMultiPass GetMultiPass ()
    {
        return _multi_pass_;
    }

    public void SetMultiPass (PMultiPass node)
    {
        if(_multi_pass_ != null)
        {
            _multi_pass_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_pass_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_multi_pass_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _multi_pass_ == child )
        {
            _multi_pass_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _multi_pass_ == oldChild )
        {
            SetMultiPass ((PMultiPass) newChild);
            return;
        }
    }

}
public sealed class AMultiPassMultMultiPass : PMultiPass
{
    private PMultiPass _multi_pass_;
    private TMult _mult_;
    private PSimpleton _simpleton_;

    public AMultiPassMultMultiPass ()
    {
    }

    public AMultiPassMultMultiPass (
            PMultiPass _multi_pass_,
            TMult _mult_,
            PSimpleton _simpleton_
    )
    {
        SetMultiPass (_multi_pass_);
        SetMult (_mult_);
        SetSimpleton (_simpleton_);
    }

    public override Object Clone()
    {
        return new AMultiPassMultMultiPass (
            (PMultiPass)CloneNode (_multi_pass_),
            (TMult)CloneNode (_mult_),
            (PSimpleton)CloneNode (_simpleton_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiPassMultMultiPass(this);
    }

    public PMultiPass GetMultiPass ()
    {
        return _multi_pass_;
    }

    public void SetMultiPass (PMultiPass node)
    {
        if(_multi_pass_ != null)
        {
            _multi_pass_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_pass_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PSimpleton GetSimpleton ()
    {
        return _simpleton_;
    }

    public void SetSimpleton (PSimpleton node)
    {
        if(_simpleton_ != null)
        {
            _simpleton_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simpleton_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_pass_)
            + ToString (_mult_)
            + ToString (_simpleton_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_pass_ == child )
        {
            _multi_pass_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _simpleton_ == child )
        {
            _simpleton_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_pass_ == oldChild )
        {
            SetMultiPass ((PMultiPass) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _simpleton_ == oldChild )
        {
            SetSimpleton ((PSimpleton) newChild);
            return;
        }
    }

}
public sealed class AMultiPassSimpletonMultiPass : PMultiPass
{
    private PSimpleton _simpleton_;

    public AMultiPassSimpletonMultiPass ()
    {
    }

    public AMultiPassSimpletonMultiPass (
            PSimpleton _simpleton_
    )
    {
        SetSimpleton (_simpleton_);
    }

    public override Object Clone()
    {
        return new AMultiPassSimpletonMultiPass (
            (PSimpleton)CloneNode (_simpleton_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiPassSimpletonMultiPass(this);
    }

    public PSimpleton GetSimpleton ()
    {
        return _simpleton_;
    }

    public void SetSimpleton (PSimpleton node)
    {
        if(_simpleton_ != null)
        {
            _simpleton_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simpleton_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_simpleton_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _simpleton_ == child )
        {
            _simpleton_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _simpleton_ == oldChild )
        {
            SetSimpleton ((PSimpleton) newChild);
            return;
        }
    }

}
public sealed class AVariableSimpletonSimpleton : PSimpleton
{
    private TId _id_;

    public AVariableSimpletonSimpleton ()
    {
    }

    public AVariableSimpletonSimpleton (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableSimpletonSimpleton (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableSimpletonSimpleton(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AIntegerSimpletonSimpleton : PSimpleton
{
    private TInteger _integer_;

    public AIntegerSimpletonSimpleton ()
    {
    }

    public AIntegerSimpletonSimpleton (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntegerSimpletonSimpleton (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerSimpletonSimpleton(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatSimpletonSimpleton : PSimpleton
{
    private TFloat _float_;

    public AFloatSimpletonSimpleton ()
    {
    }

    public AFloatSimpletonSimpleton (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatSimpletonSimpleton (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatSimpletonSimpleton(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
