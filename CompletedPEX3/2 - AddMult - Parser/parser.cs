/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using ToyLanguage.node;
using ToyLanguage.lexer;
using ToyLanguage.analysis;

namespace ToyLanguage.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTAssign(TAssign node)
    {
        index = 0;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 1;
    }

    public override void CaseTMult(TMult node)
    {
        index = 2;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 3;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 4;
    }

    public override void CaseTExponential(TExponential node)
    {
        index = 5;
    }

    public override void CaseTEqual(TEqual node)
    {
        index = 6;
    }

    public override void CaseTGreaterEqual(TGreaterEqual node)
    {
        index = 7;
    }

    public override void CaseTLessEqual(TLessEqual node)
    {
        index = 8;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 9;
    }

    public override void CaseTLess(TLess node)
    {
        index = 10;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 11;
    }

    public override void CaseTOr(TOr node)
    {
        index = 12;
    }

    public override void CaseTNot(TNot node)
    {
        index = 13;
    }

    public override void CaseTConstant(TConstant node)
    {
        index = 14;
    }

    public override void CaseTIf(TIf node)
    {
        index = 15;
    }

    public override void CaseTElse(TElse node)
    {
        index = 16;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 17;
    }

    public override void CaseTVoid(TVoid node)
    {
        index = 18;
    }

    public override void CaseTLparen(TLparen node)
    {
        index = 19;
    }

    public override void CaseTRparen(TRparen node)
    {
        index = 20;
    }

    public override void CaseTComma(TComma node)
    {
        index = 21;
    }

    public override void CaseTOpenbracket(TOpenbracket node)
    {
        index = 22;
    }

    public override void CaseTClosebracket(TClosebracket node)
    {
        index = 23;
    }

    public override void CaseTMain(TMain node)
    {
        index = 24;
    }

    public override void CaseTEol(TEol node)
    {
        index = 25;
    }

    public override void CaseTId(TId node)
    {
        index = 26;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 27;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 28;
    }

    public override void CaseTString(TString node)
    {
        index = 29;
    }

    public override void CaseTBoolean(TBoolean node)
    {
        index = 30;
    }

    public override void CaseEOF(EOF node)
    {
        index = 31;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(5), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(6), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(6), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(6), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(6), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(6), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(7), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(7), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(7), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(8), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(9), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(9), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(9), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(10), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(11), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(12), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(12), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(13), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(14), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(14), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(15), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(15), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(16), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(16), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(16), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(16), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(16), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(16), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(17), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(17), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(17), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(18), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(18), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(18), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(19), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(19), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(20), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(20), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(21), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(21), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(22), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(22), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(23), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(23), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(23), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(23), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(23), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(24), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(25), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(26), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProg node1 = (PProg) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstants pconstantsNode2 = (PConstants)nodeArrayList1[0];
        PSubfunctions psubfunctionsNode3 = (PSubfunctions)nodeArrayList2[0];
        PMainstmt pmainstmtNode4 = (PMainstmt)nodeArrayList3[0];
        AProg pprogNode1 = new AProg (
              pconstantsNode2,
              psubfunctionsNode3,
              pmainstmtNode4
        );
        nodeList.Add(pprogNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstants pconstantsNode2 = (PConstants)nodeArrayList1[0];
        TConstant tconstantNode3 = (TConstant)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TId tidNode5 = (TId)nodeArrayList4[0];
        TAssign tassignNode6 = (TAssign)nodeArrayList5[0];
        POrcond porcondNode7 = (POrcond)nodeArrayList6[0];
        TEol teolNode8 = (TEol)nodeArrayList7[0];
        ASomeconstantsConstants pconstantsNode1 = new ASomeconstantsConstants (
              pconstantsNode2,
              tconstantNode3,
              tidNode4,
              tidNode5,
              tassignNode6,
              porcondNode7,
              teolNode8
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ANoconstantsConstants pconstantsNode1 = new ANoconstantsConstants (
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PSubfunctions psubfunctionsNode2 = (PSubfunctions)nodeArrayList1[0];
        PSubfunction psubfunctionNode3 = (PSubfunction)nodeArrayList2[0];
        ASubfunctionorsubfunctionsSubfunctions psubfunctionsNode1 = new ASubfunctionorsubfunctionsSubfunctions (
              psubfunctionsNode2,
              psubfunctionNode3
        );
        nodeList.Add(psubfunctionsNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ANoneoneSubfunctions psubfunctionsNode1 = new ANoneoneSubfunctions (
        );
        nodeList.Add(psubfunctionsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PDefineargs pdefineargsNode4 = (PDefineargs)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TOpenbracket topenbracketNode6 = (TOpenbracket)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TClosebracket tclosebracketNode8 = (TClosebracket)nodeArrayList7[0];
        ASubfunction psubfunctionNode1 = new ASubfunction (
              tidNode2,
              tlparenNode3,
              pdefineargsNode4,
              trparenNode5,
              topenbracketNode6,
              pstmtsNode7,
              tclosebracketNode8
        );
        nodeList.Add(psubfunctionNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        TRparen trparenNode4 = (TRparen)nodeArrayList3[0];
        TOpenbracket topenbracketNode5 = (TOpenbracket)nodeArrayList4[0];
        PStmts pstmtsNode6 = (PStmts)nodeArrayList5[0];
        TClosebracket tclosebracketNode7 = (TClosebracket)nodeArrayList6[0];
        AMainstmt pmainstmtNode1 = new AMainstmt (
              tmainNode2,
              tlparenNode3,
              trparenNode4,
              topenbracketNode5,
              pstmtsNode6,
              tclosebracketNode7
        );
        nodeList.Add(pmainstmtNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStmts pstmtsNode2 = (PStmts)nodeArrayList1[0];
        PStmt pstmtNode3 = (PStmt)nodeArrayList2[0];
        AStatementorstatementsStmts pstmtsNode1 = new AStatementorstatementsStmts (
              pstmtsNode2,
              pstmtNode3
        );
        nodeList.Add(pstmtsNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ANonetwoStmts pstmtsNode1 = new ANonetwoStmts (
        );
        nodeList.Add(pstmtsNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignstmt passignstmtNode2 = (PAssignstmt)nodeArrayList1[0];
        AAssignStmt pstmtNode1 = new AAssignStmt (
              passignstmtNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarestmt pdeclarestmtNode2 = (PDeclarestmt)nodeArrayList1[0];
        ADeclStmt pstmtNode1 = new ADeclStmt (
              pdeclarestmtNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctioncall pfunctioncallNode2 = (PFunctioncall)nodeArrayList1[0];
        AFcStmt pstmtNode1 = new AFcStmt (
              pfunctioncallNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PCondifstmt pcondifstmtNode2 = (PCondifstmt)nodeArrayList1[0];
        ACondStmt pstmtNode1 = new ACondStmt (
              pcondifstmtNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhilestmt pwhilestmtNode2 = (PWhilestmt)nodeArrayList1[0];
        AWhileStmt pstmtNode1 = new AWhileStmt (
              pwhilestmtNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArguments pargumentsNode2 = (PArguments)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PArgument pargumentNode4 = (PArgument)nodeArrayList3[0];
        AMultipleargsArguments pargumentsNode1 = new AMultipleargsArguments (
              pargumentsNode2,
              tcommaNode3,
              pargumentNode4
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArgument pargumentNode2 = (PArgument)nodeArrayList1[0];
        ASingleargArguments pargumentsNode1 = new ASingleargArguments (
              pargumentNode2
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ANonethreeArguments pargumentsNode1 = new ANonethreeArguments (
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POrcond porcondNode2 = (POrcond)nodeArrayList1[0];
        AArgument pargumentNode1 = new AArgument (
              porcondNode2
        );
        nodeList.Add(pargumentNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDefineargs pdefineargsNode2 = (PDefineargs)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PDefinearg pdefineargNode4 = (PDefinearg)nodeArrayList3[0];
        AMultipledefineargsDefineargs pdefineargsNode1 = new AMultipledefineargsDefineargs (
              pdefineargsNode2,
              tcommaNode3,
              pdefineargNode4
        );
        nodeList.Add(pdefineargsNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDefinearg pdefineargNode2 = (PDefinearg)nodeArrayList1[0];
        ASingledefineargDefineargs pdefineargsNode1 = new ASingledefineargDefineargs (
              pdefineargNode2
        );
        nodeList.Add(pdefineargsNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ANonefourDefineargs pdefineargsNode1 = new ANonefourDefineargs (
        );
        nodeList.Add(pdefineargsNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        ADefinearg pdefineargNode1 = new ADefinearg (
              tidNode2,
              tidNode3
        );
        nodeList.Add(pdefineargNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        POrcond porcondNode4 = (POrcond)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TOpenbracket topenbracketNode6 = (TOpenbracket)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TClosebracket tclosebracketNode8 = (TClosebracket)nodeArrayList7[0];
        PCondelsestmt pcondelsestmtNode9 = (PCondelsestmt)nodeArrayList8[0];
        ACondifstmt pcondifstmtNode1 = new ACondifstmt (
              tifNode2,
              tlparenNode3,
              porcondNode4,
              trparenNode5,
              topenbracketNode6,
              pstmtsNode7,
              tclosebracketNode8,
              pcondelsestmtNode9
        );
        nodeList.Add(pcondifstmtNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TElse telseNode2 = (TElse)nodeArrayList1[0];
        TOpenbracket topenbracketNode3 = (TOpenbracket)nodeArrayList2[0];
        PStmts pstmtsNode4 = (PStmts)nodeArrayList3[0];
        TClosebracket tclosebracketNode5 = (TClosebracket)nodeArrayList4[0];
        ACondelsestmtCondelsestmt pcondelsestmtNode1 = new ACondelsestmtCondelsestmt (
              telseNode2,
              topenbracketNode3,
              pstmtsNode4,
              tclosebracketNode5
        );
        nodeList.Add(pcondelsestmtNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ANonecondCondelsestmt pcondelsestmtNode1 = new ANonecondCondelsestmt (
        );
        nodeList.Add(pcondelsestmtNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        POrcond porcondNode4 = (POrcond)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TOpenbracket topenbracketNode6 = (TOpenbracket)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TClosebracket tclosebracketNode8 = (TClosebracket)nodeArrayList7[0];
        AWhilestmt pwhilestmtNode1 = new AWhilestmt (
              twhileNode2,
              tlparenNode3,
              porcondNode4,
              trparenNode5,
              topenbracketNode6,
              pstmtsNode7,
              tclosebracketNode8
        );
        nodeList.Add(pwhilestmtNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POrcond porcondNode2 = (POrcond)nodeArrayList1[0];
        TOr torNode3 = (TOr)nodeArrayList2[0];
        PAndcond pandcondNode4 = (PAndcond)nodeArrayList3[0];
        AOrcondoneOrcond porcondNode1 = new AOrcondoneOrcond (
              porcondNode2,
              torNode3,
              pandcondNode4
        );
        nodeList.Add(porcondNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAndcond pandcondNode2 = (PAndcond)nodeArrayList1[0];
        APassandcondOrcond porcondNode1 = new APassandcondOrcond (
              pandcondNode2
        );
        nodeList.Add(porcondNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAndcond pandcondNode2 = (PAndcond)nodeArrayList1[0];
        TAnd tandNode3 = (TAnd)nodeArrayList2[0];
        PCondition pconditionNode4 = (PCondition)nodeArrayList3[0];
        AAndcondoneAndcond pandcondNode1 = new AAndcondoneAndcond (
              pandcondNode2,
              tandNode3,
              pconditionNode4
        );
        nodeList.Add(pandcondNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PCondition pconditionNode2 = (PCondition)nodeArrayList1[0];
        APasscondAndcond pandcondNode1 = new APasscondAndcond (
              pconditionNode2
        );
        nodeList.Add(pandcondNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TEqual tequalNode3 = (TEqual)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        AEqualitycomparisonCondition pconditionNode1 = new AEqualitycomparisonCondition (
              pexprNode2,
              tequalNode3,
              pexprNode4
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TLess tlessNode3 = (TLess)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        ALesscondCondition pconditionNode1 = new ALesscondCondition (
              pexprNode2,
              tlessNode3,
              pexprNode4
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TGreater tgreaterNode3 = (TGreater)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        AGreatercondCondition pconditionNode1 = new AGreatercondCondition (
              pexprNode2,
              tgreaterNode3,
              pexprNode4
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TLessEqual tlessequalNode3 = (TLessEqual)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        ALesseqcondCondition pconditionNode1 = new ALesseqcondCondition (
              pexprNode2,
              tlessequalNode3,
              pexprNode4
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TGreaterEqual tgreaterequalNode3 = (TGreaterEqual)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        AGreatereqcondCondition pconditionNode1 = new AGreatereqcondCondition (
              pexprNode2,
              tgreaterequalNode3,
              pexprNode4
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        APasstoexprCondition pconditionNode1 = new APasstoexprCondition (
              pexprNode2
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpr2 pexpr2Node4 = (PExpr2)nodeArrayList3[0];
        APlusExpr pexprNode1 = new APlusExpr (
              pexprNode2,
              tplusNode3,
              pexpr2Node4
        );
        nodeList.Add(pexprNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpr2 pexpr2Node4 = (PExpr2)nodeArrayList3[0];
        AMinusExpr pexprNode1 = new AMinusExpr (
              pexprNode2,
              tminusNode3,
              pexpr2Node4
        );
        nodeList.Add(pexprNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr2 pexpr2Node2 = (PExpr2)nodeArrayList1[0];
        APasstoexprtwoExpr pexprNode1 = new APasstoexprtwoExpr (
              pexpr2Node2
        );
        nodeList.Add(pexprNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr2 pexpr2Node2 = (PExpr2)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        PExpr3 pexpr3Node4 = (PExpr3)nodeArrayList3[0];
        AMultExpr2 pexpr2Node1 = new AMultExpr2 (
              pexpr2Node2,
              tmultNode3,
              pexpr3Node4
        );
        nodeList.Add(pexpr2Node1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr2 pexpr2Node2 = (PExpr2)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        PExpr3 pexpr3Node4 = (PExpr3)nodeArrayList3[0];
        ADivideExpr2 pexpr2Node1 = new ADivideExpr2 (
              pexpr2Node2,
              tdivideNode3,
              pexpr3Node4
        );
        nodeList.Add(pexpr2Node1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr3 pexpr3Node2 = (PExpr3)nodeArrayList1[0];
        APasstoexprthreeExpr2 pexpr2Node1 = new APasstoexprthreeExpr2 (
              pexpr3Node2
        );
        nodeList.Add(pexpr2Node1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr3 pexpr3Node2 = (PExpr3)nodeArrayList1[0];
        TExponential texponentialNode3 = (TExponential)nodeArrayList2[0];
        PExpr4 pexpr4Node4 = (PExpr4)nodeArrayList3[0];
        AExponentExpr3 pexpr3Node1 = new AExponentExpr3 (
              pexpr3Node2,
              texponentialNode3,
              pexpr4Node4
        );
        nodeList.Add(pexpr3Node1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PNegation pnegationNode2 = (PNegation)nodeArrayList1[0];
        APasstoexprfourExpr3 pexpr3Node1 = new APasstoexprfourExpr3 (
              pnegationNode2
        );
        nodeList.Add(pexpr3Node1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        PNotcond pnotcondNode3 = (PNotcond)nodeArrayList2[0];
        ANegationNegation pnegationNode1 = new ANegationNegation (
              tminusNode2,
              pnotcondNode3
        );
        nodeList.Add(pnegationNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PNotcond pnotcondNode2 = (PNotcond)nodeArrayList1[0];
        APasstonotcondNegation pnegationNode1 = new APasstonotcondNegation (
              pnotcondNode2
        );
        nodeList.Add(pnegationNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        PNotcond pnotcondNode3 = (PNotcond)nodeArrayList2[0];
        ANotcondoneNotcond pnotcondNode1 = new ANotcondoneNotcond (
              tnotNode2,
              pnotcondNode3
        );
        nodeList.Add(pnotcondNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr4 pexpr4Node2 = (PExpr4)nodeArrayList1[0];
        APassequalitycondNotcond pnotcondNode1 = new APassequalitycondNotcond (
              pexpr4Node2
        );
        nodeList.Add(pnotcondNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLparen tlparenNode2 = (TLparen)nodeArrayList1[0];
        POrcond porcondNode3 = (POrcond)nodeArrayList2[0];
        TRparen trparenNode4 = (TRparen)nodeArrayList3[0];
        AParentExpr4 pexpr4Node1 = new AParentExpr4 (
              tlparenNode2,
              porcondNode3,
              trparenNode4
        );
        nodeList.Add(pexpr4Node1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        ASingularExpr4 pexpr4Node1 = new ASingularExpr4 (
              poperandNode2
        );
        nodeList.Add(pexpr4Node1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TBoolean tbooleanNode2 = (TBoolean)nodeArrayList1[0];
        ABooloperandOperand poperandNode1 = new ABooloperandOperand (
              tbooleanNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableoperandOperand poperandNode1 = new AVariableoperandOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringoperandOperand poperandNode1 = new AStringoperandOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntoperandOperand poperandNode1 = new AIntoperandOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFloatoperandOperand poperandNode1 = new AFloatoperandOperand (
              tfloatNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclarestmt pdeclarestmtNode1 = new ADeclarestmt (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestmtNode1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        POrcond porcondNode4 = (POrcond)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignstmt passignstmtNode1 = new AAssignstmt (
              tidNode2,
              tassignNode3,
              porcondNode4,
              teolNode5
        );
        nodeList.Add(passignstmtNode1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PArguments pargumentsNode4 = (PArguments)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctioncall pfunctioncallNode1 = new AFunctioncall (
              tidNode2,
              tlparenNode3,
              pargumentsNode4,
              trparenNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {31, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 4},
        new int[] {14, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {26, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {24, 0, 6},
        new int[] {26, 0, 7},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {26, 0, 10},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {19, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {19, 0, 12},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {0, 0, 13},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {20, 0, 14},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {26, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {22, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {26, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {20, 0, 38},
        new int[] {21, 0, 39},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 3, 26},
        new int[] {12, 0, 43},
        new int[] {25, 0, 44},
      },
      new int[][] {
        new int[] {-1, 1, 27},
        new int[] {11, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 35},
        new int[] {1, 0, 46},
        new int[] {3, 0, 47},
        new int[] {6, 0, 48},
        new int[] {7, 0, 49},
        new int[] {8, 0, 50},
        new int[] {9, 0, 51},
        new int[] {10, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {2, 0, 53},
        new int[] {4, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {5, 0, 55},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {22, 0, 57},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {26, 0, 15},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {12, 0, 43},
        new int[] {20, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 49},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 50},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 56},
        new int[] {15, 0, 72},
        new int[] {17, 0, 73},
        new int[] {23, 0, 74},
        new int[] {26, 0, 75},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 1, 26},
        new int[] {11, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 36},
        new int[] {2, 0, 53},
        new int[] {4, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {2, 0, 53},
        new int[] {4, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 30},
        new int[] {1, 0, 46},
        new int[] {3, 0, 47},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {1, 0, 46},
        new int[] {3, 0, 47},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {1, 0, 46},
        new int[] {3, 0, 47},
      },
      new int[][] {
        new int[] {-1, 1, 32},
        new int[] {1, 0, 46},
        new int[] {3, 0, 47},
      },
      new int[][] {
        new int[] {-1, 1, 31},
        new int[] {1, 0, 46},
        new int[] {3, 0, 47},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {5, 0, 55},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {5, 0, 55},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {19, 0, 83},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {19, 0, 84},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 3, 75},
        new int[] {0, 0, 85},
        new int[] {19, 0, 86},
        new int[] {26, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 3, 82},
        new int[] {15, 0, 72},
        new int[] {17, 0, 73},
        new int[] {23, 0, 88},
        new int[] {26, 0, 75},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 84},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 16},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {25, 0, 95},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {12, 0, 43},
        new int[] {20, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {12, 0, 43},
        new int[] {20, 0, 97},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {12, 0, 43},
        new int[] {25, 0, 98},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {20, 0, 99},
        new int[] {21, 0, 100},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {12, 0, 43},
      },
      new int[][] {
        new int[] {-1, 1, 55},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {22, 0, 101},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {22, 0, 102},
      },
      new int[][] {
        new int[] {-1, 1, 56},
      },
      new int[][] {
        new int[] {-1, 3, 99},
        new int[] {25, 0, 103},
      },
      new int[][] {
        new int[] {-1, 3, 100},
        new int[] {3, 0, 18},
        new int[] {13, 0, 19},
        new int[] {19, 0, 20},
        new int[] {26, 0, 21},
        new int[] {27, 0, 22},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 57},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 3, 105},
        new int[] {15, 0, 72},
        new int[] {17, 0, 73},
        new int[] {23, 0, 107},
        new int[] {26, 0, 75},
      },
      new int[][] {
        new int[] {-1, 3, 106},
        new int[] {15, 0, 72},
        new int[] {17, 0, 73},
        new int[] {23, 0, 108},
        new int[] {26, 0, 75},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {16, 0, 109},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 3, 109},
        new int[] {22, 0, 111},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 3, 112},
        new int[] {15, 0, 72},
        new int[] {17, 0, 73},
        new int[] {23, 0, 113},
        new int[] {26, 0, 75},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 1},
      },
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 9},
      },
      new int[][] {
        new int[] {-1, 56},
        new int[] {57, 82},
        new int[] {101, 105},
        new int[] {102, 106},
        new int[] {111, 112},
      },
      new int[][] {
        new int[] {-1, 76},
      },
      new int[][] {
        new int[] {-1, 92},
      },
      new int[][] {
        new int[] {-1, 93},
        new int[] {100, 104},
      },
      new int[][] {
        new int[] {-1, 16},
      },
      new int[][] {
        new int[] {-1, 17},
        new int[] {39, 58},
      },
      new int[][] {
        new int[] {-1, 77},
      },
      new int[][] {
        new int[] {-1, 110},
      },
      new int[][] {
        new int[] {-1, 78},
      },
      new int[][] {
        new int[] {-1, 94},
        new int[] {13, 26},
        new int[] {20, 42},
        new int[] {83, 89},
        new int[] {84, 90},
        new int[] {85, 91},
      },
      new int[][] {
        new int[] {-1, 27},
        new int[] {43, 60},
      },
      new int[][] {
        new int[] {-1, 28},
        new int[] {45, 61},
      },
      new int[][] {
        new int[] {-1, 29},
        new int[] {48, 64},
        new int[] {49, 65},
        new int[] {50, 66},
        new int[] {51, 67},
        new int[] {52, 68},
      },
      new int[][] {
        new int[] {-1, 30},
        new int[] {46, 62},
        new int[] {47, 63},
      },
      new int[][] {
        new int[] {-1, 31},
        new int[] {53, 69},
        new int[] {54, 70},
      },
      new int[][] {
        new int[] {-1, 32},
      },
      new int[][] {
        new int[] {-1, 33},
        new int[] {18, 40},
        new int[] {19, 41},
      },
      new int[][] {
        new int[] {-1, 34},
        new int[] {55, 71},
      },
      new int[][] {
        new int[] {-1, 35},
      },
      new int[][] {
        new int[] {-1, 79},
      },
      new int[][] {
        new int[] {-1, 80},
      },
      new int[][] {
        new int[] {-1, 81},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'const', 'main', id",
      "expecting: EOF",
      "expecting: id",
      "expecting: 'main', id",
      "expecting: '('",
      "expecting: ':='",
      "expecting: ')'",
      "expecting: ')', ',', id",
      "expecting: '-', '!', '(', id, integer, float, string, boolean",
      "expecting: '{'",
      "expecting: ')', ','",
      "expecting: '!', '(', id, integer, float, string, boolean",
      "expecting: '+', '*', '-', '/', '^', '==', '>=', '<=', '>', '<', '&&', '||', ')', ',', ';'",
      "expecting: '||', ';'",
      "expecting: '&&', '||', ')', ',', ';'",
      "expecting: '+', '-', '==', '>=', '<=', '>', '<', '&&', '||', ')', ',', ';'",
      "expecting: '+', '*', '-', '/', '==', '>=', '<=', '>', '<', '&&', '||', ')', ',', ';'",
      "expecting: 'if', 'while', '}', id",
      "expecting: '||', ')'",
      "expecting: '(', id, integer, float, string, boolean",
      "expecting: '+', '-', '&&', '||', ')', ',', ';'",
      "expecting: ':=', '(', id",
      "expecting: '-', '!', '(', ')', ',', id, integer, float, string, boolean",
      "expecting: ';'",
      "expecting: '||', ')', ','",
      "expecting: 'if', 'else', 'while', '}', id",
    };

    private static int[] errors = {
      0, 1, 0, 2, 3, 2, 4, 4, 3, 1, 5, 6, 7, 8, 9, 2, 
      10, 10, 11, 11, 8, 12, 12, 12, 12, 12, 13, 14, 14, 15, 16, 12, 
      12, 12, 12, 12, 17, 10, 9, 2, 12, 12, 18, 8, 0, 8, 8, 8, 
      8, 8, 8, 8, 8, 8, 8, 19, 17, 17, 10, 12, 14, 14, 16, 16, 
      20, 20, 20, 20, 20, 12, 12, 12, 4, 4, 1, 21, 17, 17, 17, 17, 
      17, 17, 17, 8, 8, 8, 22, 23, 3, 18, 18, 13, 10, 10, 24, 17, 
      9, 9, 17, 23, 8, 17, 17, 17, 10, 17, 17, 25, 17, 9, 17, 17, 
      17, 17, 
    };
}
}
